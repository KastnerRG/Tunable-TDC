// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="phase,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.000000,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=84,HLS_SYN_LUT=169,HLS_VERSION=2018_2}" *)

module phase (
        ap_clk,
        ap_rst_n,
        psincdec_V,
        psen_V,
        ps_done_V,
        s_axi_CNTRL_AWVALID,
        s_axi_CNTRL_AWREADY,
        s_axi_CNTRL_AWADDR,
        s_axi_CNTRL_WVALID,
        s_axi_CNTRL_WREADY,
        s_axi_CNTRL_WDATA,
        s_axi_CNTRL_WSTRB,
        s_axi_CNTRL_ARVALID,
        s_axi_CNTRL_ARREADY,
        s_axi_CNTRL_ARADDR,
        s_axi_CNTRL_RVALID,
        s_axi_CNTRL_RREADY,
        s_axi_CNTRL_RDATA,
        s_axi_CNTRL_RRESP,
        s_axi_CNTRL_BVALID,
        s_axi_CNTRL_BREADY,
        s_axi_CNTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;
parameter    C_S_AXI_CNTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CNTRL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CNTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [0:0] psincdec_V;
output  [0:0] psen_V;
input  [0:0] ps_done_V;
input   s_axi_CNTRL_AWVALID;
output   s_axi_CNTRL_AWREADY;
input  [C_S_AXI_CNTRL_ADDR_WIDTH - 1:0] s_axi_CNTRL_AWADDR;
input   s_axi_CNTRL_WVALID;
output   s_axi_CNTRL_WREADY;
input  [C_S_AXI_CNTRL_DATA_WIDTH - 1:0] s_axi_CNTRL_WDATA;
input  [C_S_AXI_CNTRL_WSTRB_WIDTH - 1:0] s_axi_CNTRL_WSTRB;
input   s_axi_CNTRL_ARVALID;
output   s_axi_CNTRL_ARREADY;
input  [C_S_AXI_CNTRL_ADDR_WIDTH - 1:0] s_axi_CNTRL_ARADDR;
output   s_axi_CNTRL_RVALID;
input   s_axi_CNTRL_RREADY;
output  [C_S_AXI_CNTRL_DATA_WIDTH - 1:0] s_axi_CNTRL_RDATA;
output  [1:0] s_axi_CNTRL_RRESP;
output   s_axi_CNTRL_BVALID;
input   s_axi_CNTRL_BREADY;
output  [1:0] s_axi_CNTRL_BRESP;
output   interrupt;

reg[0:0] psincdec_V;
reg[0:0] psen_V;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] rincdec_V;
wire   [0:0] tmp_fu_62_p1;
reg   [0:0] tmp_reg_66;
reg   [0:0] psen_V_preg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg   [0:0] psincdec_V_preg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state7;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 psen_V_preg = 1'd0;
#0 psincdec_V_preg = 1'd0;
end

phase_CNTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CNTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CNTRL_DATA_WIDTH ))
phase_CNTRL_s_axi_U(
    .AWVALID(s_axi_CNTRL_AWVALID),
    .AWREADY(s_axi_CNTRL_AWREADY),
    .AWADDR(s_axi_CNTRL_AWADDR),
    .WVALID(s_axi_CNTRL_WVALID),
    .WREADY(s_axi_CNTRL_WREADY),
    .WDATA(s_axi_CNTRL_WDATA),
    .WSTRB(s_axi_CNTRL_WSTRB),
    .ARVALID(s_axi_CNTRL_ARVALID),
    .ARREADY(s_axi_CNTRL_ARREADY),
    .ARADDR(s_axi_CNTRL_ARADDR),
    .RVALID(s_axi_CNTRL_RVALID),
    .RREADY(s_axi_CNTRL_RREADY),
    .RDATA(s_axi_CNTRL_RDATA),
    .RRESP(s_axi_CNTRL_RRESP),
    .BVALID(s_axi_CNTRL_BVALID),
    .BREADY(s_axi_CNTRL_BREADY),
    .BRESP(s_axi_CNTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .rincdec_V(rincdec_V)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        psen_V_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            psen_V_preg <= 1'd1;
        end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
            psen_V_preg <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        psincdec_V_preg <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            psincdec_V_preg <= tmp_reg_66;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_reg_66 <= tmp_fu_62_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        psen_V = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        psen_V = 1'd0;
    end else begin
        psen_V = psen_V_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        psincdec_V = tmp_reg_66;
    end else begin
        psincdec_V = psincdec_V_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign tmp_fu_62_p1 = rincdec_V[0:0];

endmodule //phase
