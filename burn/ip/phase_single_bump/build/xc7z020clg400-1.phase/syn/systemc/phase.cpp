// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "phase.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic phase::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic phase::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> phase::ap_ST_fsm_state1 = "1";
const sc_lv<7> phase::ap_ST_fsm_state2 = "10";
const sc_lv<7> phase::ap_ST_fsm_state3 = "100";
const sc_lv<7> phase::ap_ST_fsm_state4 = "1000";
const sc_lv<7> phase::ap_ST_fsm_state5 = "10000";
const sc_lv<7> phase::ap_ST_fsm_state6 = "100000";
const sc_lv<7> phase::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> phase::ap_const_lv32_0 = "00000000000000000000000000000000";
const int phase::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<1> phase::ap_const_lv1_0 = "0";
const sc_lv<32> phase::ap_const_lv32_1 = "1";
const sc_lv<32> phase::ap_const_lv32_3 = "11";
const sc_lv<1> phase::ap_const_lv1_1 = "1";
const sc_lv<32> phase::ap_const_lv32_4 = "100";
const sc_lv<32> phase::ap_const_lv32_5 = "101";
const sc_lv<32> phase::ap_const_lv32_2 = "10";
const sc_lv<32> phase::ap_const_lv32_6 = "110";
const bool phase::ap_const_boolean_1 = true;

phase::phase(sc_module_name name) : sc_module(name), mVcdFile(0) {
    phase_CNTRL_s_axi_U = new phase_CNTRL_s_axi<C_S_AXI_CNTRL_ADDR_WIDTH,C_S_AXI_CNTRL_DATA_WIDTH>("phase_CNTRL_s_axi_U");
    phase_CNTRL_s_axi_U->AWVALID(s_axi_CNTRL_AWVALID);
    phase_CNTRL_s_axi_U->AWREADY(s_axi_CNTRL_AWREADY);
    phase_CNTRL_s_axi_U->AWADDR(s_axi_CNTRL_AWADDR);
    phase_CNTRL_s_axi_U->WVALID(s_axi_CNTRL_WVALID);
    phase_CNTRL_s_axi_U->WREADY(s_axi_CNTRL_WREADY);
    phase_CNTRL_s_axi_U->WDATA(s_axi_CNTRL_WDATA);
    phase_CNTRL_s_axi_U->WSTRB(s_axi_CNTRL_WSTRB);
    phase_CNTRL_s_axi_U->ARVALID(s_axi_CNTRL_ARVALID);
    phase_CNTRL_s_axi_U->ARREADY(s_axi_CNTRL_ARREADY);
    phase_CNTRL_s_axi_U->ARADDR(s_axi_CNTRL_ARADDR);
    phase_CNTRL_s_axi_U->RVALID(s_axi_CNTRL_RVALID);
    phase_CNTRL_s_axi_U->RREADY(s_axi_CNTRL_RREADY);
    phase_CNTRL_s_axi_U->RDATA(s_axi_CNTRL_RDATA);
    phase_CNTRL_s_axi_U->RRESP(s_axi_CNTRL_RRESP);
    phase_CNTRL_s_axi_U->BVALID(s_axi_CNTRL_BVALID);
    phase_CNTRL_s_axi_U->BREADY(s_axi_CNTRL_BREADY);
    phase_CNTRL_s_axi_U->BRESP(s_axi_CNTRL_BRESP);
    phase_CNTRL_s_axi_U->ACLK(ap_clk);
    phase_CNTRL_s_axi_U->ARESET(ap_rst_n_inv);
    phase_CNTRL_s_axi_U->ACLK_EN(ap_var_for_const0);
    phase_CNTRL_s_axi_U->ap_start(ap_start);
    phase_CNTRL_s_axi_U->interrupt(interrupt);
    phase_CNTRL_s_axi_U->ap_ready(ap_ready);
    phase_CNTRL_s_axi_U->ap_done(ap_done);
    phase_CNTRL_s_axi_U->ap_idle(ap_idle);
    phase_CNTRL_s_axi_U->rincdec_V(rincdec_V);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_psen_V);
    sensitive << ( psen_V_preg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_psincdec_V);
    sensitive << ( tmp_reg_66 );
    sensitive << ( psincdec_V_preg );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_fu_62_p1);
    sensitive << ( rincdec_V );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000001";
    psen_V_preg = "0";
    psincdec_V_preg = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "phase_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, psincdec_V, "(port)psincdec_V");
    sc_trace(mVcdFile, psen_V, "(port)psen_V");
    sc_trace(mVcdFile, ps_done_V, "(port)ps_done_V");
    sc_trace(mVcdFile, s_axi_CNTRL_AWVALID, "(port)s_axi_CNTRL_AWVALID");
    sc_trace(mVcdFile, s_axi_CNTRL_AWREADY, "(port)s_axi_CNTRL_AWREADY");
    sc_trace(mVcdFile, s_axi_CNTRL_AWADDR, "(port)s_axi_CNTRL_AWADDR");
    sc_trace(mVcdFile, s_axi_CNTRL_WVALID, "(port)s_axi_CNTRL_WVALID");
    sc_trace(mVcdFile, s_axi_CNTRL_WREADY, "(port)s_axi_CNTRL_WREADY");
    sc_trace(mVcdFile, s_axi_CNTRL_WDATA, "(port)s_axi_CNTRL_WDATA");
    sc_trace(mVcdFile, s_axi_CNTRL_WSTRB, "(port)s_axi_CNTRL_WSTRB");
    sc_trace(mVcdFile, s_axi_CNTRL_ARVALID, "(port)s_axi_CNTRL_ARVALID");
    sc_trace(mVcdFile, s_axi_CNTRL_ARREADY, "(port)s_axi_CNTRL_ARREADY");
    sc_trace(mVcdFile, s_axi_CNTRL_ARADDR, "(port)s_axi_CNTRL_ARADDR");
    sc_trace(mVcdFile, s_axi_CNTRL_RVALID, "(port)s_axi_CNTRL_RVALID");
    sc_trace(mVcdFile, s_axi_CNTRL_RREADY, "(port)s_axi_CNTRL_RREADY");
    sc_trace(mVcdFile, s_axi_CNTRL_RDATA, "(port)s_axi_CNTRL_RDATA");
    sc_trace(mVcdFile, s_axi_CNTRL_RRESP, "(port)s_axi_CNTRL_RRESP");
    sc_trace(mVcdFile, s_axi_CNTRL_BVALID, "(port)s_axi_CNTRL_BVALID");
    sc_trace(mVcdFile, s_axi_CNTRL_BREADY, "(port)s_axi_CNTRL_BREADY");
    sc_trace(mVcdFile, s_axi_CNTRL_BRESP, "(port)s_axi_CNTRL_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, rincdec_V, "rincdec_V");
    sc_trace(mVcdFile, tmp_fu_62_p1, "tmp_fu_62_p1");
    sc_trace(mVcdFile, tmp_reg_66, "tmp_reg_66");
    sc_trace(mVcdFile, psen_V_preg, "psen_V_preg");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, psincdec_V_preg, "psincdec_V_preg");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("phase.hdltvin.dat");
    mHdltvoutHandle.open("phase.hdltvout.dat");
}

phase::~phase() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete phase_CNTRL_s_axi_U;
}

void phase::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void phase::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        psen_V_preg = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            psen_V_preg = ap_const_lv1_1;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
            psen_V_preg = ap_const_lv1_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        psincdec_V_preg = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            psincdec_V_preg = tmp_reg_66.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_reg_66 = tmp_fu_62_p1.read();
    }
}

void phase::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void phase::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void phase::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void phase::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void phase::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void phase::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void phase::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void phase::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void phase::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void phase::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void phase::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void phase::thread_psen_V() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        psen_V = ap_const_lv1_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        psen_V = ap_const_lv1_0;
    } else {
        psen_V = psen_V_preg.read();
    }
}

void phase::thread_psincdec_V() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        psincdec_V = tmp_reg_66.read();
    } else {
        psincdec_V = psincdec_V_preg.read();
    }
}

void phase::thread_tmp_fu_62_p1() {
    tmp_fu_62_p1 = rincdec_V.read().range(1-1, 0);
}

void phase::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

void phase::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"psincdec_V\" :  \"" << psincdec_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"psen_V\" :  \"" << psen_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ps_done_V\" :  \"" << ps_done_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CNTRL_AWVALID\" :  \"" << s_axi_CNTRL_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CNTRL_AWREADY\" :  \"" << s_axi_CNTRL_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CNTRL_AWADDR\" :  \"" << s_axi_CNTRL_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CNTRL_WVALID\" :  \"" << s_axi_CNTRL_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CNTRL_WREADY\" :  \"" << s_axi_CNTRL_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CNTRL_WDATA\" :  \"" << s_axi_CNTRL_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CNTRL_WSTRB\" :  \"" << s_axi_CNTRL_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CNTRL_ARVALID\" :  \"" << s_axi_CNTRL_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CNTRL_ARREADY\" :  \"" << s_axi_CNTRL_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CNTRL_ARADDR\" :  \"" << s_axi_CNTRL_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CNTRL_RVALID\" :  \"" << s_axi_CNTRL_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CNTRL_RREADY\" :  \"" << s_axi_CNTRL_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CNTRL_RDATA\" :  \"" << s_axi_CNTRL_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CNTRL_RRESP\" :  \"" << s_axi_CNTRL_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CNTRL_BVALID\" :  \"" << s_axi_CNTRL_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CNTRL_BREADY\" :  \"" << s_axi_CNTRL_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CNTRL_BRESP\" :  \"" << s_axi_CNTRL_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

