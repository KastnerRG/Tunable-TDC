// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _phase_HH_
#define _phase_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "phase_CNTRL_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_CNTRL_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_CNTRL_DATA_WIDTH = 32>
struct phase : public sc_module {
    // Port declarations 23
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_lv<1> > psincdec_V;
    sc_out< sc_lv<1> > psen_V;
    sc_in< sc_lv<1> > ps_done_V;
    sc_in< sc_logic > s_axi_CNTRL_AWVALID;
    sc_out< sc_logic > s_axi_CNTRL_AWREADY;
    sc_in< sc_uint<C_S_AXI_CNTRL_ADDR_WIDTH> > s_axi_CNTRL_AWADDR;
    sc_in< sc_logic > s_axi_CNTRL_WVALID;
    sc_out< sc_logic > s_axi_CNTRL_WREADY;
    sc_in< sc_uint<C_S_AXI_CNTRL_DATA_WIDTH> > s_axi_CNTRL_WDATA;
    sc_in< sc_uint<C_S_AXI_CNTRL_DATA_WIDTH/8> > s_axi_CNTRL_WSTRB;
    sc_in< sc_logic > s_axi_CNTRL_ARVALID;
    sc_out< sc_logic > s_axi_CNTRL_ARREADY;
    sc_in< sc_uint<C_S_AXI_CNTRL_ADDR_WIDTH> > s_axi_CNTRL_ARADDR;
    sc_out< sc_logic > s_axi_CNTRL_RVALID;
    sc_in< sc_logic > s_axi_CNTRL_RREADY;
    sc_out< sc_uint<C_S_AXI_CNTRL_DATA_WIDTH> > s_axi_CNTRL_RDATA;
    sc_out< sc_lv<2> > s_axi_CNTRL_RRESP;
    sc_out< sc_logic > s_axi_CNTRL_BVALID;
    sc_in< sc_logic > s_axi_CNTRL_BREADY;
    sc_out< sc_lv<2> > s_axi_CNTRL_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    phase(sc_module_name name);
    SC_HAS_PROCESS(phase);

    ~phase();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    phase_CNTRL_s_axi<C_S_AXI_CNTRL_ADDR_WIDTH,C_S_AXI_CNTRL_DATA_WIDTH>* phase_CNTRL_s_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<7> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > rincdec_V;
    sc_signal< sc_lv<1> > tmp_fu_62_p1;
    sc_signal< sc_lv<1> > tmp_reg_66;
    sc_signal< sc_lv<1> > psen_V_preg;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<1> > psincdec_V_preg;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<7> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<7> ap_ST_fsm_state1;
    static const sc_lv<7> ap_ST_fsm_state2;
    static const sc_lv<7> ap_ST_fsm_state3;
    static const sc_lv<7> ap_ST_fsm_state4;
    static const sc_lv<7> ap_ST_fsm_state5;
    static const sc_lv<7> ap_ST_fsm_state6;
    static const sc_lv<7> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_6;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_psen_V();
    void thread_psincdec_V();
    void thread_tmp_fu_62_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
