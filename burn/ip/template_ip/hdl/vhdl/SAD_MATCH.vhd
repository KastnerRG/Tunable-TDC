-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity SAD_MATCH is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    INPUT_r_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    INPUT_r_TVALID : IN STD_LOGIC;
    INPUT_r_TREADY : OUT STD_LOGIC;
    INPUT_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_r_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUTPUT_r_TVALID : OUT STD_LOGIC;
    OUTPUT_r_TREADY : IN STD_LOGIC;
    OUTPUT_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of SAD_MATCH is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "SAD_MATCH,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.534100,HLS_SYN_LAT=2360001,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=0,HLS_SYN_FF=1303,HLS_SYN_LUT=1921,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv16_9C40 : STD_LOGIC_VECTOR (15 downto 0) := "1001110001000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv32_C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001000";
    constant ap_const_lv16_9C3F : STD_LOGIC_VECTOR (15 downto 0) := "1001110000111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal INPUT_data_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal INPUT_data_0_vld_in : STD_LOGIC;
    signal INPUT_data_0_vld_out : STD_LOGIC;
    signal INPUT_data_0_ack_in : STD_LOGIC;
    signal INPUT_data_0_ack_out : STD_LOGIC;
    signal INPUT_data_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal INPUT_data_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal INPUT_data_0_sel_rd : STD_LOGIC := '0';
    signal INPUT_data_0_sel_wr : STD_LOGIC := '0';
    signal INPUT_data_0_sel : STD_LOGIC;
    signal INPUT_data_0_load_A : STD_LOGIC;
    signal INPUT_data_0_load_B : STD_LOGIC;
    signal INPUT_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal INPUT_data_0_state_cmp_full : STD_LOGIC;
    signal INPUT_last_V_0_vld_in : STD_LOGIC;
    signal INPUT_last_V_0_ack_out : STD_LOGIC;
    signal INPUT_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_data_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal OUTPUT_data_1_vld_in : STD_LOGIC;
    signal OUTPUT_data_1_vld_out : STD_LOGIC;
    signal OUTPUT_data_1_ack_in : STD_LOGIC;
    signal OUTPUT_data_1_ack_out : STD_LOGIC;
    signal OUTPUT_data_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal OUTPUT_data_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal OUTPUT_data_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_data_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_data_1_sel : STD_LOGIC;
    signal OUTPUT_data_1_load_A : STD_LOGIC;
    signal OUTPUT_data_1_load_B : STD_LOGIC;
    signal OUTPUT_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_data_1_state_cmp_full : STD_LOGIC;
    signal OUTPUT_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_last_V_1_vld_in : STD_LOGIC;
    signal OUTPUT_last_V_1_vld_out : STD_LOGIC;
    signal OUTPUT_last_V_1_ack_in : STD_LOGIC;
    signal OUTPUT_last_V_1_ack_out : STD_LOGIC;
    signal OUTPUT_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal OUTPUT_last_V_1_sel_rd : STD_LOGIC := '0';
    signal OUTPUT_last_V_1_sel_wr : STD_LOGIC := '0';
    signal OUTPUT_last_V_1_sel : STD_LOGIC;
    signal OUTPUT_last_V_1_load_A : STD_LOGIC;
    signal OUTPUT_last_V_1_load_B : STD_LOGIC;
    signal OUTPUT_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal OUTPUT_last_V_1_state_cmp_full : STD_LOGIC;
    signal row_buf_buf_9_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_buf_buf_9_ce0 : STD_LOGIC;
    signal row_buf_buf_9_we0 : STD_LOGIC;
    signal row_buf_buf_9_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal win_buf_win_0_9 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_1_9 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_2_9 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_3_9 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_4_9 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_5_9 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_6_9 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_7_9 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_8_9 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_9_9 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal row_buf_buf_0_ce0 : STD_LOGIC;
    signal row_buf_buf_0_we0 : STD_LOGIC;
    signal row_buf_buf_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_buf_buf_1_ce0 : STD_LOGIC;
    signal row_buf_buf_1_we0 : STD_LOGIC;
    signal row_buf_buf_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_buf_buf_2_ce0 : STD_LOGIC;
    signal row_buf_buf_2_we0 : STD_LOGIC;
    signal row_buf_buf_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_buf_buf_3_ce0 : STD_LOGIC;
    signal row_buf_buf_3_we0 : STD_LOGIC;
    signal row_buf_buf_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_buf_buf_4_ce0 : STD_LOGIC;
    signal row_buf_buf_4_we0 : STD_LOGIC;
    signal row_buf_buf_4_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_buf_buf_5_ce0 : STD_LOGIC;
    signal row_buf_buf_5_we0 : STD_LOGIC;
    signal row_buf_buf_5_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_buf_buf_6_ce0 : STD_LOGIC;
    signal row_buf_buf_6_we0 : STD_LOGIC;
    signal row_buf_buf_6_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_buf_buf_7_ce0 : STD_LOGIC;
    signal row_buf_buf_7_we0 : STD_LOGIC;
    signal row_buf_buf_7_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_buf_buf_8_ce0 : STD_LOGIC;
    signal row_buf_buf_8_we0 : STD_LOGIC;
    signal row_buf_buf_8_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal win_buf_win_0_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_1_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_2_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_3_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_4_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_5_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_6_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_7_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_9_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_0_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_1_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_2_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_3_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_4_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_5_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_6_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_7_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_9_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_0_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_1_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_2_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_3_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_4_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_5_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_6_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_7_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_9_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_0_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_1_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_2_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_3_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_4_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_5_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_6_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_7_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_9_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_0_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_1_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_2_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_3_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_4_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_5_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_6_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_7_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_9_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_0_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_1_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_2_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_3_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_4_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_5_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_6_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_7_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_9_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_0_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_1_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_2_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_3_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_4_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_5_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_6_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_7_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_9_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_0_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_1_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_2_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_3_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_4_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_5_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_6_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_7_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_9_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_0_8 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_1_8 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_2_8 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_3_8 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_4_8 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_5_8 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_6_8 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_7_8 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal win_buf_win_9_8 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal INPUT_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal OUTPUT_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal l_reg_722 : STD_LOGIC_VECTOR (3 downto 0);
    signal y_reg_734 : STD_LOGIC_VECTOR (3 downto 0);
    signal sad_reg_745 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_fu_1255_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_reg_2419 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2 : BOOLEAN;
    signal tmp_fu_1266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_2424 : STD_LOGIC_VECTOR (63 downto 0);
    signal row_buf_buf_9_addr_reg_2437 : STD_LOGIC_VECTOR (7 downto 0);
    signal win_buf_win_0_9_load_reg_2442 : STD_LOGIC_VECTOR (7 downto 0);
    signal win_buf_win_1_9_load_reg_2447 : STD_LOGIC_VECTOR (7 downto 0);
    signal win_buf_win_2_9_load_reg_2452 : STD_LOGIC_VECTOR (7 downto 0);
    signal win_buf_win_3_9_load_reg_2457 : STD_LOGIC_VECTOR (7 downto 0);
    signal win_buf_win_4_9_load_reg_2462 : STD_LOGIC_VECTOR (7 downto 0);
    signal win_buf_win_5_9_load_reg_2467 : STD_LOGIC_VECTOR (7 downto 0);
    signal win_buf_win_6_9_load_reg_2472 : STD_LOGIC_VECTOR (7 downto 0);
    signal win_buf_win_7_9_load_reg_2477 : STD_LOGIC_VECTOR (7 downto 0);
    signal win_buf_win_8_9_load_reg_2482 : STD_LOGIC_VECTOR (7 downto 0);
    signal win_buf_win_9_9_load_reg_2487 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_1_fu_1277_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal row_buf_buf_0_addr_reg_2500 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal row_buf_buf_1_addr_reg_2505 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_buf_buf_2_addr_reg_2510 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_buf_buf_3_addr_reg_2515 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_buf_buf_4_addr_reg_2520 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_buf_buf_5_addr_reg_2525 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_buf_buf_6_addr_reg_2530 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_buf_buf_7_addr_reg_2535 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_buf_buf_8_addr_reg_2540 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond3_fu_1823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_reg_2545 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state6_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal l_1_fu_1829_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal l_1_reg_2549 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal exitcond5_fu_1921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond5_reg_2554 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state9_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal y_1_fu_1927_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal tmp5_fu_2303_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp5_reg_2563 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp9_fu_2339_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp9_reg_2568 : STD_LOGIC_VECTOR (10 downto 0);
    signal sad_2_9_fu_2361_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal tmp_8_fu_2367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_2578 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal row_buf_buf_9_load_reg_2583 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal exitcond_fu_2373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_2588 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal j_1_fu_2379_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_2592 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_s_fu_2397_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_reg_2597 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_2405_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_2409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state6 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state9 : STD_LOGIC;
    signal p_012_rec_reg_457 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_reg_469 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_m_phi_fu_485_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal m_reg_481 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond2_fu_1271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_l_phi_fu_726_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_j_phi_fu_761_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_757 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_buf_buf_load_1_p_reg_769 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_1835_p12 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_1973_p12 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_2003_p12 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_2033_p12 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_2063_p12 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_2093_p12 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_2123_p12 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_2153_p12 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_2183_p12 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_2213_p12 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_2243_p12 : STD_LOGIC_VECTOR (7 downto 0);
    signal absl_cast_fu_1999_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal absl_1_cast_fu_2029_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp6_fu_2273_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal absl_3_cast_fu_2089_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal absl_4_cast_fu_2119_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp8_fu_2283_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp8_cast_fu_2289_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal absl_2_cast_fu_2059_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp7_fu_2293_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp7_cast_fu_2299_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp6_cast_fu_2279_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal absl_5_cast_fu_2149_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal absl_6_cast_fu_2179_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp1_fu_2309_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal absl_8_cast_fu_2239_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal absl_9_cast_fu_2269_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp2_fu_2319_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp12_cast_fu_2325_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal absl_7_cast_fu_2209_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp3_fu_2329_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp11_cast_fu_2335_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp10_cast_fu_2315_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp9_cast_fu_2348_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp5_cast_fu_2345_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_19_fu_2351_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_cast_fu_2357_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal k_1_fu_2385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_2391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_fu_1249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_condition_775 : BOOLEAN;

    component SAD_MATCH_mux_104lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component SAD_MATCH_row_bufbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component SAD_MATCH_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    row_buf_buf_9_U : component SAD_MATCH_row_bufbkb
    generic map (
        DataWidth => 8,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => row_buf_buf_9_address0,
        ce0 => row_buf_buf_9_ce0,
        we0 => row_buf_buf_9_we0,
        d0 => INPUT_data_0_data_out,
        q0 => row_buf_buf_9_q0);

    row_buf_buf_0_U : component SAD_MATCH_row_bufbkb
    generic map (
        DataWidth => 8,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => row_buf_buf_0_addr_reg_2500,
        ce0 => row_buf_buf_0_ce0,
        we0 => row_buf_buf_0_we0,
        d0 => ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18,
        q0 => row_buf_buf_0_q0);

    row_buf_buf_1_U : component SAD_MATCH_row_bufbkb
    generic map (
        DataWidth => 8,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => row_buf_buf_1_addr_reg_2505,
        ce0 => row_buf_buf_1_ce0,
        we0 => row_buf_buf_1_we0,
        d0 => ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18,
        q0 => row_buf_buf_1_q0);

    row_buf_buf_2_U : component SAD_MATCH_row_bufbkb
    generic map (
        DataWidth => 8,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => row_buf_buf_2_addr_reg_2510,
        ce0 => row_buf_buf_2_ce0,
        we0 => row_buf_buf_2_we0,
        d0 => ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18,
        q0 => row_buf_buf_2_q0);

    row_buf_buf_3_U : component SAD_MATCH_row_bufbkb
    generic map (
        DataWidth => 8,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => row_buf_buf_3_addr_reg_2515,
        ce0 => row_buf_buf_3_ce0,
        we0 => row_buf_buf_3_we0,
        d0 => ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18,
        q0 => row_buf_buf_3_q0);

    row_buf_buf_4_U : component SAD_MATCH_row_bufbkb
    generic map (
        DataWidth => 8,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => row_buf_buf_4_addr_reg_2520,
        ce0 => row_buf_buf_4_ce0,
        we0 => row_buf_buf_4_we0,
        d0 => ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18,
        q0 => row_buf_buf_4_q0);

    row_buf_buf_5_U : component SAD_MATCH_row_bufbkb
    generic map (
        DataWidth => 8,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => row_buf_buf_5_addr_reg_2525,
        ce0 => row_buf_buf_5_ce0,
        we0 => row_buf_buf_5_we0,
        d0 => ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18,
        q0 => row_buf_buf_5_q0);

    row_buf_buf_6_U : component SAD_MATCH_row_bufbkb
    generic map (
        DataWidth => 8,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => row_buf_buf_6_addr_reg_2530,
        ce0 => row_buf_buf_6_ce0,
        we0 => row_buf_buf_6_we0,
        d0 => ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18,
        q0 => row_buf_buf_6_q0);

    row_buf_buf_7_U : component SAD_MATCH_row_bufbkb
    generic map (
        DataWidth => 8,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => row_buf_buf_7_addr_reg_2535,
        ce0 => row_buf_buf_7_ce0,
        we0 => row_buf_buf_7_we0,
        d0 => ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18,
        q0 => row_buf_buf_7_q0);

    row_buf_buf_8_U : component SAD_MATCH_row_bufbkb
    generic map (
        DataWidth => 8,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => row_buf_buf_8_addr_reg_2540,
        ce0 => row_buf_buf_8_ce0,
        we0 => row_buf_buf_8_we0,
        d0 => ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18,
        q0 => row_buf_buf_8_q0);

    SAD_MATCH_CTRL_s_axi_U : component SAD_MATCH_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    SAD_MATCH_mux_104lbW_U1 : component SAD_MATCH_mux_104lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => row_buf_buf_0_q0,
        din1 => row_buf_buf_1_q0,
        din2 => row_buf_buf_2_q0,
        din3 => row_buf_buf_3_q0,
        din4 => row_buf_buf_4_q0,
        din5 => row_buf_buf_5_q0,
        din6 => row_buf_buf_6_q0,
        din7 => row_buf_buf_7_q0,
        din8 => row_buf_buf_8_q0,
        din9 => row_buf_buf_9_q0,
        din10 => l_reg_722,
        dout => tmp_2_fu_1835_p12);

    SAD_MATCH_mux_104lbW_U2 : component SAD_MATCH_mux_104lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => win_buf_win_0_0,
        din1 => win_buf_win_1_0,
        din2 => win_buf_win_2_0,
        din3 => win_buf_win_3_0,
        din4 => win_buf_win_4_0,
        din5 => win_buf_win_5_0,
        din6 => win_buf_win_6_0,
        din7 => win_buf_win_7_0,
        din8 => win_buf_win_8_0,
        din9 => win_buf_win_9_0,
        din10 => y_reg_734,
        dout => tmp_4_fu_1973_p12);

    SAD_MATCH_mux_104lbW_U3 : component SAD_MATCH_mux_104lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => win_buf_win_0_1,
        din1 => win_buf_win_1_1,
        din2 => win_buf_win_2_1,
        din3 => win_buf_win_3_1,
        din4 => win_buf_win_4_1,
        din5 => win_buf_win_5_1,
        din6 => win_buf_win_6_1,
        din7 => win_buf_win_7_1,
        din8 => win_buf_win_8_1,
        din9 => win_buf_win_9_1,
        din10 => y_reg_734,
        dout => tmp_9_fu_2003_p12);

    SAD_MATCH_mux_104lbW_U4 : component SAD_MATCH_mux_104lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => win_buf_win_0_2,
        din1 => win_buf_win_1_2,
        din2 => win_buf_win_2_2,
        din3 => win_buf_win_3_2,
        din4 => win_buf_win_4_2,
        din5 => win_buf_win_5_2,
        din6 => win_buf_win_6_2,
        din7 => win_buf_win_7_2,
        din8 => win_buf_win_8_2,
        din9 => win_buf_win_9_2,
        din10 => y_reg_734,
        dout => tmp_11_fu_2033_p12);

    SAD_MATCH_mux_104lbW_U5 : component SAD_MATCH_mux_104lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => win_buf_win_0_3,
        din1 => win_buf_win_1_3,
        din2 => win_buf_win_2_3,
        din3 => win_buf_win_3_3,
        din4 => win_buf_win_4_3,
        din5 => win_buf_win_5_3,
        din6 => win_buf_win_6_3,
        din7 => win_buf_win_7_3,
        din8 => win_buf_win_8_3,
        din9 => win_buf_win_9_3,
        din10 => y_reg_734,
        dout => tmp_12_fu_2063_p12);

    SAD_MATCH_mux_104lbW_U6 : component SAD_MATCH_mux_104lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => win_buf_win_0_4,
        din1 => win_buf_win_1_4,
        din2 => win_buf_win_2_4,
        din3 => win_buf_win_3_4,
        din4 => win_buf_win_4_4,
        din5 => win_buf_win_5_4,
        din6 => win_buf_win_6_4,
        din7 => win_buf_win_7_4,
        din8 => win_buf_win_8_4,
        din9 => win_buf_win_9_4,
        din10 => y_reg_734,
        dout => tmp_13_fu_2093_p12);

    SAD_MATCH_mux_104lbW_U7 : component SAD_MATCH_mux_104lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => win_buf_win_0_5,
        din1 => win_buf_win_1_5,
        din2 => win_buf_win_2_5,
        din3 => win_buf_win_3_5,
        din4 => win_buf_win_4_5,
        din5 => win_buf_win_5_5,
        din6 => win_buf_win_6_5,
        din7 => win_buf_win_7_5,
        din8 => win_buf_win_8_5,
        din9 => win_buf_win_9_5,
        din10 => y_reg_734,
        dout => tmp_14_fu_2123_p12);

    SAD_MATCH_mux_104lbW_U8 : component SAD_MATCH_mux_104lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => win_buf_win_0_6,
        din1 => win_buf_win_1_6,
        din2 => win_buf_win_2_6,
        din3 => win_buf_win_3_6,
        din4 => win_buf_win_4_6,
        din5 => win_buf_win_5_6,
        din6 => win_buf_win_6_6,
        din7 => win_buf_win_7_6,
        din8 => win_buf_win_8_6,
        din9 => win_buf_win_9_6,
        din10 => y_reg_734,
        dout => tmp_15_fu_2153_p12);

    SAD_MATCH_mux_104lbW_U9 : component SAD_MATCH_mux_104lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => win_buf_win_0_7,
        din1 => win_buf_win_1_7,
        din2 => win_buf_win_2_7,
        din3 => win_buf_win_3_7,
        din4 => win_buf_win_4_7,
        din5 => win_buf_win_5_7,
        din6 => win_buf_win_6_7,
        din7 => win_buf_win_7_7,
        din8 => win_buf_win_8_7,
        din9 => win_buf_win_9_7,
        din10 => y_reg_734,
        dout => tmp_16_fu_2183_p12);

    SAD_MATCH_mux_104lbW_U10 : component SAD_MATCH_mux_104lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => win_buf_win_0_8,
        din1 => win_buf_win_1_8,
        din2 => win_buf_win_2_8,
        din3 => win_buf_win_3_8,
        din4 => win_buf_win_4_8,
        din5 => win_buf_win_5_8,
        din6 => win_buf_win_6_8,
        din7 => win_buf_win_7_8,
        din8 => win_buf_win_8_8,
        din9 => win_buf_win_9_8,
        din10 => y_reg_734,
        dout => tmp_17_fu_2213_p12);

    SAD_MATCH_mux_104lbW_U11 : component SAD_MATCH_mux_104lbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => win_buf_win_0_9,
        din1 => win_buf_win_1_9,
        din2 => win_buf_win_2_9,
        din3 => win_buf_win_3_9,
        din4 => win_buf_win_4_9,
        din5 => win_buf_win_5_9,
        din6 => win_buf_win_6_9,
        din7 => win_buf_win_7_9,
        din8 => win_buf_win_8_9,
        din9 => win_buf_win_9_9,
        din10 => y_reg_734,
        dout => tmp_18_fu_2243_p12);





    INPUT_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_data_0_ack_out) and (ap_const_logic_1 = INPUT_data_0_vld_out))) then 
                                        INPUT_data_0_sel_rd <= not(INPUT_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    INPUT_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = INPUT_data_0_ack_in) and (ap_const_logic_1 = INPUT_data_0_vld_in))) then 
                                        INPUT_data_0_sel_wr <= not(INPUT_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    INPUT_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_data_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = INPUT_data_0_state) and (ap_const_logic_0 = INPUT_data_0_vld_in)) or ((ap_const_lv2_3 = INPUT_data_0_state) and (ap_const_logic_0 = INPUT_data_0_vld_in) and (ap_const_logic_1 = INPUT_data_0_ack_out)))) then 
                    INPUT_data_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = INPUT_data_0_state) and (ap_const_logic_0 = INPUT_data_0_ack_out)) or ((ap_const_lv2_3 = INPUT_data_0_state) and (ap_const_logic_0 = INPUT_data_0_ack_out) and (ap_const_logic_1 = INPUT_data_0_vld_in)))) then 
                    INPUT_data_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_data_0_vld_in) and (ap_const_logic_1 = INPUT_data_0_ack_out))) and not(((ap_const_logic_0 = INPUT_data_0_ack_out) and (ap_const_logic_1 = INPUT_data_0_vld_in))) and (ap_const_lv2_3 = INPUT_data_0_state)) or ((ap_const_lv2_1 = INPUT_data_0_state) and (ap_const_logic_1 = INPUT_data_0_ack_out)) or ((ap_const_lv2_2 = INPUT_data_0_state) and (ap_const_logic_1 = INPUT_data_0_vld_in)))) then 
                    INPUT_data_0_state <= ap_const_lv2_3;
                else 
                    INPUT_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    INPUT_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                INPUT_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = INPUT_last_V_0_state) and (ap_const_logic_0 = INPUT_last_V_0_vld_in)) or ((ap_const_lv2_3 = INPUT_last_V_0_state) and (ap_const_logic_0 = INPUT_last_V_0_vld_in) and (ap_const_logic_1 = INPUT_last_V_0_ack_out)))) then 
                    INPUT_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = INPUT_last_V_0_state) and (ap_const_logic_0 = INPUT_last_V_0_ack_out)) or ((ap_const_lv2_3 = INPUT_last_V_0_state) and (ap_const_logic_0 = INPUT_last_V_0_ack_out) and (ap_const_logic_1 = INPUT_last_V_0_vld_in)))) then 
                    INPUT_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = INPUT_last_V_0_vld_in) and (ap_const_logic_1 = INPUT_last_V_0_ack_out))) and not(((ap_const_logic_0 = INPUT_last_V_0_ack_out) and (ap_const_logic_1 = INPUT_last_V_0_vld_in))) and (ap_const_lv2_3 = INPUT_last_V_0_state)) or ((ap_const_lv2_1 = INPUT_last_V_0_state) and (ap_const_logic_1 = INPUT_last_V_0_ack_out)) or ((ap_const_lv2_2 = INPUT_last_V_0_state) and (ap_const_logic_1 = INPUT_last_V_0_vld_in)))) then 
                    INPUT_last_V_0_state <= ap_const_lv2_3;
                else 
                    INPUT_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_data_1_ack_out) and (ap_const_logic_1 = OUTPUT_data_1_vld_out))) then 
                                        OUTPUT_data_1_sel_rd <= not(OUTPUT_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_data_1_ack_in) and (ap_const_logic_1 = OUTPUT_data_1_vld_in))) then 
                                        OUTPUT_data_1_sel_wr <= not(OUTPUT_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_data_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_data_1_state) and (ap_const_logic_0 = OUTPUT_data_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_data_1_state) and (ap_const_logic_0 = OUTPUT_data_1_vld_in) and (ap_const_logic_1 = OUTPUT_data_1_ack_out)))) then 
                    OUTPUT_data_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_data_1_state) and (ap_const_logic_0 = OUTPUT_data_1_ack_out)) or ((ap_const_lv2_3 = OUTPUT_data_1_state) and (ap_const_logic_0 = OUTPUT_data_1_ack_out) and (ap_const_logic_1 = OUTPUT_data_1_vld_in)))) then 
                    OUTPUT_data_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_data_1_vld_in) and (ap_const_logic_1 = OUTPUT_data_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_data_1_ack_out) and (ap_const_logic_1 = OUTPUT_data_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_data_1_state)) or ((ap_const_lv2_1 = OUTPUT_data_1_state) and (ap_const_logic_1 = OUTPUT_data_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_data_1_state) and (ap_const_logic_1 = OUTPUT_data_1_vld_in)))) then 
                    OUTPUT_data_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_last_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_last_V_1_vld_out))) then 
                                        OUTPUT_last_V_1_sel_rd <= not(OUTPUT_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = OUTPUT_last_V_1_ack_in) and (ap_const_logic_1 = OUTPUT_last_V_1_vld_in))) then 
                                        OUTPUT_last_V_1_sel_wr <= not(OUTPUT_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    OUTPUT_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                OUTPUT_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = OUTPUT_last_V_1_state) and (ap_const_logic_0 = OUTPUT_last_V_1_vld_in)) or ((ap_const_lv2_3 = OUTPUT_last_V_1_state) and (ap_const_logic_0 = OUTPUT_last_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_last_V_1_ack_out)))) then 
                    OUTPUT_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = OUTPUT_last_V_1_state) and (ap_const_logic_0 = OUTPUT_last_V_1_ack_out)) or ((ap_const_lv2_3 = OUTPUT_last_V_1_state) and (ap_const_logic_0 = OUTPUT_last_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_last_V_1_vld_in)))) then 
                    OUTPUT_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = OUTPUT_last_V_1_vld_in) and (ap_const_logic_1 = OUTPUT_last_V_1_ack_out))) and not(((ap_const_logic_0 = OUTPUT_last_V_1_ack_out) and (ap_const_logic_1 = OUTPUT_last_V_1_vld_in))) and (ap_const_lv2_3 = OUTPUT_last_V_1_state)) or ((ap_const_lv2_1 = OUTPUT_last_V_1_state) and (ap_const_logic_1 = OUTPUT_last_V_1_ack_out)) or ((ap_const_lv2_2 = OUTPUT_last_V_1_state) and (ap_const_logic_1 = OUTPUT_last_V_1_vld_in)))) then 
                    OUTPUT_last_V_1_state <= ap_const_lv2_3;
                else 
                    OUTPUT_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state6))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state6);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state9))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state9);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j_reg_757_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_2588 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                j_reg_757 <= j_1_reg_2592;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                j_reg_757 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    k_reg_469_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_logic_1 = OUTPUT_data_1_ack_in))) then 
                k_reg_469 <= p_s_reg_2597;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_reg_469 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    l_reg_722_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                l_reg_722 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (exitcond3_reg_2545 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                l_reg_722 <= l_1_reg_2549;
            end if; 
        end if;
    end process;

    m_reg_481_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_1271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                m_reg_481 <= m_1_fu_1277_p2;
            elsif (((ap_const_logic_1 = INPUT_data_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                m_reg_481 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_012_rec_reg_457_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_logic_1 = OUTPUT_data_1_ack_in))) then 
                p_012_rec_reg_457 <= i_reg_2419;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_012_rec_reg_457 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    row_buf_buf_load_1_p_reg_769_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_phi_mux_j_phi_fu_761_p4 = ap_const_lv4_0)) and not((ap_phi_mux_j_phi_fu_761_p4 = ap_const_lv4_1)) and not((ap_phi_mux_j_phi_fu_761_p4 = ap_const_lv4_2)) and not((ap_phi_mux_j_phi_fu_761_p4 = ap_const_lv4_3)) and not((ap_phi_mux_j_phi_fu_761_p4 = ap_const_lv4_4)) and not((ap_phi_mux_j_phi_fu_761_p4 = ap_const_lv4_5)) and not((ap_phi_mux_j_phi_fu_761_p4 = ap_const_lv4_6)) and not((ap_phi_mux_j_phi_fu_761_p4 = ap_const_lv4_7)) and (exitcond_fu_2373_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                row_buf_buf_load_1_p_reg_769 <= row_buf_buf_9_load_reg_2583;
            elsif (((j_reg_757 = ap_const_lv4_7) and (exitcond_reg_2588 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                row_buf_buf_load_1_p_reg_769 <= row_buf_buf_8_q0;
            elsif (((j_reg_757 = ap_const_lv4_6) and (exitcond_reg_2588 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                row_buf_buf_load_1_p_reg_769 <= row_buf_buf_7_q0;
            elsif (((j_reg_757 = ap_const_lv4_5) and (exitcond_reg_2588 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                row_buf_buf_load_1_p_reg_769 <= row_buf_buf_6_q0;
            elsif (((j_reg_757 = ap_const_lv4_4) and (exitcond_reg_2588 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                row_buf_buf_load_1_p_reg_769 <= row_buf_buf_5_q0;
            elsif (((j_reg_757 = ap_const_lv4_3) and (exitcond_reg_2588 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                row_buf_buf_load_1_p_reg_769 <= row_buf_buf_4_q0;
            elsif (((j_reg_757 = ap_const_lv4_2) and (exitcond_reg_2588 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                row_buf_buf_load_1_p_reg_769 <= row_buf_buf_3_q0;
            elsif (((j_reg_757 = ap_const_lv4_1) and (exitcond_reg_2588 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                row_buf_buf_load_1_p_reg_769 <= row_buf_buf_2_q0;
            elsif (((j_reg_757 = ap_const_lv4_0) and (exitcond_reg_2588 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                row_buf_buf_load_1_p_reg_769 <= row_buf_buf_1_q0;
            end if; 
        end if;
    end process;

    sad_reg_745_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                sad_reg_745 <= ap_const_lv15_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond5_reg_2554 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                sad_reg_745 <= sad_2_9_fu_2361_p2;
            end if; 
        end if;
    end process;

    y_reg_734_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                y_reg_734 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond5_fu_1921_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                y_reg_734 <= y_1_fu_1927_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_data_0_load_A)) then
                INPUT_data_0_payload_A <= INPUT_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = INPUT_data_0_load_B)) then
                INPUT_data_0_payload_B <= INPUT_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_data_1_load_A)) then
                OUTPUT_data_1_payload_A <= tmp_7_fu_2405_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_data_1_load_B)) then
                OUTPUT_data_1_payload_B <= tmp_7_fu_2405_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_last_V_1_load_A)) then
                OUTPUT_last_V_1_payload_A <= tmp_s_fu_2409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = OUTPUT_last_V_1_load_B)) then
                OUTPUT_last_V_1_payload_B <= tmp_s_fu_2409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond3_reg_2545 <= exitcond3_fu_1823_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                exitcond5_reg_2554 <= exitcond5_fu_1921_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                exitcond_reg_2588 <= exitcond_fu_2373_p2;
                j_1_reg_2592 <= j_1_fu_2379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = OUTPUT_last_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_data_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_2419 <= i_fu_1255_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                l_1_reg_2549 <= l_1_fu_1829_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_logic_1 = OUTPUT_data_1_ack_in))) then
                p_s_reg_2597 <= p_s_fu_2397_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                row_buf_buf_0_addr_reg_2500 <= tmp_reg_2424(8 - 1 downto 0);
                row_buf_buf_1_addr_reg_2505 <= tmp_reg_2424(8 - 1 downto 0);
                row_buf_buf_2_addr_reg_2510 <= tmp_reg_2424(8 - 1 downto 0);
                row_buf_buf_3_addr_reg_2515 <= tmp_reg_2424(8 - 1 downto 0);
                row_buf_buf_4_addr_reg_2520 <= tmp_reg_2424(8 - 1 downto 0);
                row_buf_buf_5_addr_reg_2525 <= tmp_reg_2424(8 - 1 downto 0);
                row_buf_buf_6_addr_reg_2530 <= tmp_reg_2424(8 - 1 downto 0);
                row_buf_buf_7_addr_reg_2535 <= tmp_reg_2424(8 - 1 downto 0);
                row_buf_buf_8_addr_reg_2540 <= tmp_reg_2424(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = INPUT_data_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                row_buf_buf_9_addr_reg_2437 <= tmp_fu_1266_p1(8 - 1 downto 0);
                tmp_reg_2424 <= tmp_fu_1266_p1;
                win_buf_win_0_9_load_reg_2442 <= win_buf_win_0_9;
                win_buf_win_1_9_load_reg_2447 <= win_buf_win_1_9;
                win_buf_win_2_9_load_reg_2452 <= win_buf_win_2_9;
                win_buf_win_3_9_load_reg_2457 <= win_buf_win_3_9;
                win_buf_win_4_9_load_reg_2462 <= win_buf_win_4_9;
                win_buf_win_5_9_load_reg_2467 <= win_buf_win_5_9;
                win_buf_win_6_9_load_reg_2472 <= win_buf_win_6_9;
                win_buf_win_7_9_load_reg_2477 <= win_buf_win_7_9;
                win_buf_win_8_9_load_reg_2482 <= win_buf_win_8_9;
                win_buf_win_9_9_load_reg_2487 <= win_buf_win_9_9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                row_buf_buf_9_load_reg_2583 <= row_buf_buf_9_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond5_fu_1921_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                tmp5_reg_2563 <= tmp5_fu_2303_p2;
                tmp9_reg_2568 <= tmp9_fu_2339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_8_reg_2578 <= tmp_8_fu_2367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_0) and (exitcond2_fu_1271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                win_buf_win_0_0 <= ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18;
                win_buf_win_1_0 <= ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18;
                win_buf_win_2_0 <= ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18;
                win_buf_win_3_0 <= ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18;
                win_buf_win_4_0 <= ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18;
                win_buf_win_5_0 <= ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18;
                win_buf_win_6_0 <= ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18;
                win_buf_win_7_0 <= ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18;
                win_buf_win_8_0 <= ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18;
                win_buf_win_9_0 <= ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_1) and (exitcond2_fu_1271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                win_buf_win_0_1 <= ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18;
                win_buf_win_1_1 <= ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18;
                win_buf_win_2_1 <= ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18;
                win_buf_win_3_1 <= ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18;
                win_buf_win_4_1 <= ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18;
                win_buf_win_5_1 <= ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18;
                win_buf_win_6_1 <= ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18;
                win_buf_win_7_1 <= ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18;
                win_buf_win_8_1 <= ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18;
                win_buf_win_9_1 <= ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_2) and (exitcond2_fu_1271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                win_buf_win_0_2 <= ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18;
                win_buf_win_1_2 <= ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18;
                win_buf_win_2_2 <= ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18;
                win_buf_win_3_2 <= ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18;
                win_buf_win_4_2 <= ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18;
                win_buf_win_5_2 <= ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18;
                win_buf_win_6_2 <= ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18;
                win_buf_win_7_2 <= ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18;
                win_buf_win_8_2 <= ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18;
                win_buf_win_9_2 <= ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_3) and (exitcond2_fu_1271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                win_buf_win_0_3 <= ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18;
                win_buf_win_1_3 <= ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18;
                win_buf_win_2_3 <= ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18;
                win_buf_win_3_3 <= ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18;
                win_buf_win_4_3 <= ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18;
                win_buf_win_5_3 <= ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18;
                win_buf_win_6_3 <= ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18;
                win_buf_win_7_3 <= ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18;
                win_buf_win_8_3 <= ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18;
                win_buf_win_9_3 <= ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_4) and (exitcond2_fu_1271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                win_buf_win_0_4 <= ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18;
                win_buf_win_1_4 <= ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18;
                win_buf_win_2_4 <= ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18;
                win_buf_win_3_4 <= ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18;
                win_buf_win_4_4 <= ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18;
                win_buf_win_5_4 <= ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18;
                win_buf_win_6_4 <= ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18;
                win_buf_win_7_4 <= ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18;
                win_buf_win_8_4 <= ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18;
                win_buf_win_9_4 <= ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_5) and (exitcond2_fu_1271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                win_buf_win_0_5 <= ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18;
                win_buf_win_1_5 <= ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18;
                win_buf_win_2_5 <= ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18;
                win_buf_win_3_5 <= ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18;
                win_buf_win_4_5 <= ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18;
                win_buf_win_5_5 <= ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18;
                win_buf_win_6_5 <= ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18;
                win_buf_win_7_5 <= ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18;
                win_buf_win_8_5 <= ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18;
                win_buf_win_9_5 <= ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_6) and (exitcond2_fu_1271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                win_buf_win_0_6 <= ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18;
                win_buf_win_1_6 <= ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18;
                win_buf_win_2_6 <= ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18;
                win_buf_win_3_6 <= ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18;
                win_buf_win_4_6 <= ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18;
                win_buf_win_5_6 <= ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18;
                win_buf_win_6_6 <= ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18;
                win_buf_win_7_6 <= ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18;
                win_buf_win_8_6 <= ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18;
                win_buf_win_9_6 <= ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_7) and (exitcond2_fu_1271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                win_buf_win_0_7 <= ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18;
                win_buf_win_1_7 <= ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18;
                win_buf_win_2_7 <= ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18;
                win_buf_win_3_7 <= ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18;
                win_buf_win_4_7 <= ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18;
                win_buf_win_5_7 <= ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18;
                win_buf_win_6_7 <= ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18;
                win_buf_win_7_7 <= ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18;
                win_buf_win_8_7 <= ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18;
                win_buf_win_9_7 <= ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_7)) and not((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_6)) and not((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_5)) and not((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_4)) and not((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_3)) and not((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_2)) and not((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_1)) and not((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_0)) and (exitcond2_fu_1271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                win_buf_win_0_8 <= ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18;
                win_buf_win_1_8 <= ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18;
                win_buf_win_2_8 <= ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18;
                win_buf_win_3_8 <= ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18;
                win_buf_win_4_8 <= ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18;
                win_buf_win_5_8 <= ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18;
                win_buf_win_6_8 <= ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18;
                win_buf_win_7_8 <= ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18;
                win_buf_win_8_8 <= ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18;
                win_buf_win_9_8 <= ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (l_reg_722 = ap_const_lv4_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                win_buf_win_0_9 <= tmp_2_fu_1835_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (l_reg_722 = ap_const_lv4_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                win_buf_win_1_9 <= tmp_2_fu_1835_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (l_reg_722 = ap_const_lv4_2) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                win_buf_win_2_9 <= tmp_2_fu_1835_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (l_reg_722 = ap_const_lv4_3) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                win_buf_win_3_9 <= tmp_2_fu_1835_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (l_reg_722 = ap_const_lv4_4) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                win_buf_win_4_9 <= tmp_2_fu_1835_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (l_reg_722 = ap_const_lv4_5) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                win_buf_win_5_9 <= tmp_2_fu_1835_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (l_reg_722 = ap_const_lv4_6) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                win_buf_win_6_9 <= tmp_2_fu_1835_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (l_reg_722 = ap_const_lv4_7) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                win_buf_win_7_9 <= tmp_2_fu_1835_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (l_reg_722 = ap_const_lv4_8) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                win_buf_win_8_9 <= tmp_2_fu_1835_p12;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((l_reg_722 = ap_const_lv4_8)) and not((l_reg_722 = ap_const_lv4_7)) and not((l_reg_722 = ap_const_lv4_6)) and not((l_reg_722 = ap_const_lv4_5)) and not((l_reg_722 = ap_const_lv4_4)) and not((l_reg_722 = ap_const_lv4_3)) and not((l_reg_722 = ap_const_lv4_2)) and not((l_reg_722 = ap_const_lv4_1)) and not((l_reg_722 = ap_const_lv4_0)) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                win_buf_win_9_9 <= tmp_2_fu_1835_p12;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, INPUT_data_0_vld_out, OUTPUT_data_1_ack_in, OUTPUT_last_V_1_ack_in, ap_CS_fsm_state3, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state2, ap_CS_fsm_state4, exitcond3_fu_1823_p2, ap_enable_reg_pp1_iter0, exitcond5_fu_1921_p2, ap_enable_reg_pp2_iter0, exitcond_fu_2373_p2, ap_CS_fsm_state13, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, exitcond2_fu_1271_p2, exitcond4_fu_1249_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_logic_0 = OUTPUT_last_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_data_1_ack_in))) and (exitcond4_fu_1249_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((ap_const_logic_0 = OUTPUT_last_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_data_1_ack_in))) and (exitcond4_fu_1249_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = INPUT_data_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond2_fu_1271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond3_fu_1823_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond3_fu_1823_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond5_fu_1921_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond5_fu_1921_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((exitcond_fu_2373_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_logic_1 = OUTPUT_data_1_ack_in))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_logic_1 = OUTPUT_data_1_ack_in))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    INPUT_data_0_ack_in <= INPUT_data_0_state(1);

    INPUT_data_0_ack_out_assign_proc : process(INPUT_data_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = INPUT_data_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            INPUT_data_0_ack_out <= ap_const_logic_1;
        else 
            INPUT_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_data_0_data_out_assign_proc : process(INPUT_data_0_payload_A, INPUT_data_0_payload_B, INPUT_data_0_sel)
    begin
        if ((ap_const_logic_1 = INPUT_data_0_sel)) then 
            INPUT_data_0_data_out <= INPUT_data_0_payload_B;
        else 
            INPUT_data_0_data_out <= INPUT_data_0_payload_A;
        end if; 
    end process;

    INPUT_data_0_load_A <= (not(INPUT_data_0_sel_wr) and INPUT_data_0_state_cmp_full);
    INPUT_data_0_load_B <= (INPUT_data_0_state_cmp_full and INPUT_data_0_sel_wr);
    INPUT_data_0_sel <= INPUT_data_0_sel_rd;
    INPUT_data_0_state_cmp_full <= '0' when (INPUT_data_0_state = ap_const_lv2_1) else '1';
    INPUT_data_0_vld_in <= INPUT_r_TVALID;
    INPUT_data_0_vld_out <= INPUT_data_0_state(0);

    INPUT_last_V_0_ack_out_assign_proc : process(INPUT_data_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = INPUT_data_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            INPUT_last_V_0_ack_out <= ap_const_logic_1;
        else 
            INPUT_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    INPUT_last_V_0_vld_in <= INPUT_r_TVALID;

    INPUT_r_TDATA_blk_n_assign_proc : process(INPUT_data_0_state, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            INPUT_r_TDATA_blk_n <= INPUT_data_0_state(0);
        else 
            INPUT_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    INPUT_r_TREADY <= INPUT_last_V_0_state(1);
    OUTPUT_data_1_ack_in <= OUTPUT_data_1_state(1);
    OUTPUT_data_1_ack_out <= OUTPUT_r_TREADY;

    OUTPUT_data_1_data_out_assign_proc : process(OUTPUT_data_1_payload_A, OUTPUT_data_1_payload_B, OUTPUT_data_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_data_1_sel)) then 
            OUTPUT_data_1_data_out <= OUTPUT_data_1_payload_B;
        else 
            OUTPUT_data_1_data_out <= OUTPUT_data_1_payload_A;
        end if; 
    end process;

    OUTPUT_data_1_load_A <= (not(OUTPUT_data_1_sel_wr) and OUTPUT_data_1_state_cmp_full);
    OUTPUT_data_1_load_B <= (OUTPUT_data_1_state_cmp_full and OUTPUT_data_1_sel_wr);
    OUTPUT_data_1_sel <= OUTPUT_data_1_sel_rd;
    OUTPUT_data_1_state_cmp_full <= '0' when (OUTPUT_data_1_state = ap_const_lv2_1) else '1';

    OUTPUT_data_1_vld_in_assign_proc : process(OUTPUT_data_1_ack_in, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_logic_1 = OUTPUT_data_1_ack_in))) then 
            OUTPUT_data_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_data_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_data_1_vld_out <= OUTPUT_data_1_state(0);
    OUTPUT_last_V_1_ack_in <= OUTPUT_last_V_1_state(1);
    OUTPUT_last_V_1_ack_out <= OUTPUT_r_TREADY;

    OUTPUT_last_V_1_data_out_assign_proc : process(OUTPUT_last_V_1_payload_A, OUTPUT_last_V_1_payload_B, OUTPUT_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = OUTPUT_last_V_1_sel)) then 
            OUTPUT_last_V_1_data_out <= OUTPUT_last_V_1_payload_B;
        else 
            OUTPUT_last_V_1_data_out <= OUTPUT_last_V_1_payload_A;
        end if; 
    end process;

    OUTPUT_last_V_1_load_A <= (not(OUTPUT_last_V_1_sel_wr) and OUTPUT_last_V_1_state_cmp_full);
    OUTPUT_last_V_1_load_B <= (OUTPUT_last_V_1_state_cmp_full and OUTPUT_last_V_1_sel_wr);
    OUTPUT_last_V_1_sel <= OUTPUT_last_V_1_sel_rd;
    OUTPUT_last_V_1_state_cmp_full <= '0' when (OUTPUT_last_V_1_state = ap_const_lv2_1) else '1';

    OUTPUT_last_V_1_vld_in_assign_proc : process(OUTPUT_data_1_ack_in, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_logic_1 = OUTPUT_data_1_ack_in))) then 
            OUTPUT_last_V_1_vld_in <= ap_const_logic_1;
        else 
            OUTPUT_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    OUTPUT_last_V_1_vld_out <= OUTPUT_last_V_1_state(0);
    OUTPUT_r_TDATA <= OUTPUT_data_1_data_out;

    OUTPUT_r_TDATA_blk_n_assign_proc : process(OUTPUT_data_1_state, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            OUTPUT_r_TDATA_blk_n <= OUTPUT_data_1_state(1);
        else 
            OUTPUT_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    OUTPUT_r_TLAST <= OUTPUT_last_V_1_data_out;
    OUTPUT_r_TVALID <= OUTPUT_last_V_1_state(0);
    absl_1_cast_fu_2029_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_2003_p12),9));
    absl_2_cast_fu_2059_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_2033_p12),10));
    absl_3_cast_fu_2089_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_2063_p12),9));
    absl_4_cast_fu_2119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_2093_p12),9));
    absl_5_cast_fu_2149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_2123_p12),9));
    absl_6_cast_fu_2179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_2153_p12),9));
    absl_7_cast_fu_2209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_2183_p12),10));
    absl_8_cast_fu_2239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_2213_p12),9));
    absl_9_cast_fu_2269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_2243_p12),9));
    absl_cast_fu_1999_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_1973_p12),9));
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_assign_proc : process(OUTPUT_data_1_ack_in, OUTPUT_last_V_1_ack_in)
    begin
                ap_block_state2 <= ((ap_const_logic_0 = OUTPUT_last_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_data_1_ack_in));
    end process;

        ap_block_state6_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_775_assign_proc : process(ap_phi_mux_m_phi_fu_485_p4)
    begin
                ap_condition_775 <= (not((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_7)) and not((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_6)) and not((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_5)) and not((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_4)) and not((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_3)) and not((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_2)) and not((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_1)) and not((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_0)));
    end process;


    ap_condition_pp1_exit_iter0_state6_assign_proc : process(exitcond3_fu_1823_p2)
    begin
        if ((exitcond3_fu_1823_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state9_assign_proc : process(exitcond5_fu_1921_p2)
    begin
        if ((exitcond5_fu_1921_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(OUTPUT_data_1_ack_in, OUTPUT_last_V_1_ack_in, ap_CS_fsm_state2, exitcond4_fu_1249_p2)
    begin
        if ((not(((ap_const_logic_0 = OUTPUT_last_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_data_1_ack_in))) and (exitcond4_fu_1249_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_j_phi_fu_761_p4 <= j_reg_757;

    ap_phi_mux_l_phi_fu_726_p4_assign_proc : process(l_reg_722, exitcond3_reg_2545, ap_CS_fsm_pp1_stage0, l_1_reg_2549, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (exitcond3_reg_2545 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ap_phi_mux_l_phi_fu_726_p4 <= l_1_reg_2549;
        else 
            ap_phi_mux_l_phi_fu_726_p4 <= l_reg_722;
        end if; 
    end process;

    ap_phi_mux_m_phi_fu_485_p4 <= m_reg_481;

    ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18_assign_proc : process(row_buf_buf_1_q0, row_buf_buf_2_q0, row_buf_buf_3_q0, row_buf_buf_4_q0, row_buf_buf_5_q0, row_buf_buf_6_q0, row_buf_buf_7_q0, row_buf_buf_8_q0, exitcond_reg_2588, j_reg_757, ap_CS_fsm_state14, row_buf_buf_load_1_p_reg_769)
    begin
        if (((exitcond_reg_2588 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
            if ((j_reg_757 = ap_const_lv4_7)) then 
                ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18 <= row_buf_buf_8_q0;
            elsif ((j_reg_757 = ap_const_lv4_6)) then 
                ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18 <= row_buf_buf_7_q0;
            elsif ((j_reg_757 = ap_const_lv4_5)) then 
                ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18 <= row_buf_buf_6_q0;
            elsif ((j_reg_757 = ap_const_lv4_4)) then 
                ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18 <= row_buf_buf_5_q0;
            elsif ((j_reg_757 = ap_const_lv4_3)) then 
                ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18 <= row_buf_buf_4_q0;
            elsif ((j_reg_757 = ap_const_lv4_2)) then 
                ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18 <= row_buf_buf_3_q0;
            elsif ((j_reg_757 = ap_const_lv4_1)) then 
                ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18 <= row_buf_buf_2_q0;
            elsif ((j_reg_757 = ap_const_lv4_0)) then 
                ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18 <= row_buf_buf_1_q0;
            else 
                ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18 <= row_buf_buf_load_1_p_reg_769;
            end if;
        else 
            ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18 <= row_buf_buf_load_1_p_reg_769;
        end if; 
    end process;


    ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18_assign_proc : process(win_buf_win_0_1, win_buf_win_0_2, win_buf_win_0_3, win_buf_win_0_4, win_buf_win_0_5, win_buf_win_0_6, win_buf_win_0_7, win_buf_win_0_8, win_buf_win_0_9_load_reg_2442, ap_CS_fsm_state4, ap_phi_mux_m_phi_fu_485_p4, exitcond2_fu_1271_p2, ap_condition_775)
    begin
        if (((exitcond2_fu_1271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
            if ((ap_const_boolean_1 = ap_condition_775)) then 
                ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18 <= win_buf_win_0_9_load_reg_2442;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_7)) then 
                ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18 <= win_buf_win_0_8;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_6)) then 
                ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18 <= win_buf_win_0_7;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_5)) then 
                ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18 <= win_buf_win_0_6;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_4)) then 
                ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18 <= win_buf_win_0_5;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_3)) then 
                ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18 <= win_buf_win_0_4;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_2)) then 
                ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18 <= win_buf_win_0_3;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_1)) then 
                ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18 <= win_buf_win_0_2;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_0)) then 
                ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18 <= win_buf_win_0_1;
            else 
                ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18 <= "XXXXXXXX";
            end if;
        else 
            ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18 <= "XXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18_assign_proc : process(win_buf_win_2_1, win_buf_win_2_2, win_buf_win_2_3, win_buf_win_2_4, win_buf_win_2_5, win_buf_win_2_6, win_buf_win_2_7, win_buf_win_2_8, win_buf_win_2_9_load_reg_2452, ap_CS_fsm_state4, ap_phi_mux_m_phi_fu_485_p4, exitcond2_fu_1271_p2, ap_condition_775)
    begin
        if (((exitcond2_fu_1271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
            if ((ap_const_boolean_1 = ap_condition_775)) then 
                ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18 <= win_buf_win_2_9_load_reg_2452;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_7)) then 
                ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18 <= win_buf_win_2_8;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_6)) then 
                ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18 <= win_buf_win_2_7;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_5)) then 
                ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18 <= win_buf_win_2_6;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_4)) then 
                ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18 <= win_buf_win_2_5;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_3)) then 
                ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18 <= win_buf_win_2_4;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_2)) then 
                ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18 <= win_buf_win_2_3;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_1)) then 
                ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18 <= win_buf_win_2_2;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_0)) then 
                ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18 <= win_buf_win_2_1;
            else 
                ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18 <= "XXXXXXXX";
            end if;
        else 
            ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18 <= "XXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18_assign_proc : process(win_buf_win_3_1, win_buf_win_3_2, win_buf_win_3_3, win_buf_win_3_4, win_buf_win_3_5, win_buf_win_3_6, win_buf_win_3_7, win_buf_win_3_8, win_buf_win_3_9_load_reg_2457, ap_CS_fsm_state4, ap_phi_mux_m_phi_fu_485_p4, exitcond2_fu_1271_p2, ap_condition_775)
    begin
        if (((exitcond2_fu_1271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
            if ((ap_const_boolean_1 = ap_condition_775)) then 
                ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18 <= win_buf_win_3_9_load_reg_2457;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_7)) then 
                ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18 <= win_buf_win_3_8;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_6)) then 
                ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18 <= win_buf_win_3_7;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_5)) then 
                ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18 <= win_buf_win_3_6;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_4)) then 
                ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18 <= win_buf_win_3_5;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_3)) then 
                ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18 <= win_buf_win_3_4;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_2)) then 
                ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18 <= win_buf_win_3_3;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_1)) then 
                ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18 <= win_buf_win_3_2;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_0)) then 
                ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18 <= win_buf_win_3_1;
            else 
                ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18 <= "XXXXXXXX";
            end if;
        else 
            ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18 <= "XXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18_assign_proc : process(win_buf_win_4_1, win_buf_win_4_2, win_buf_win_4_3, win_buf_win_4_4, win_buf_win_4_5, win_buf_win_4_6, win_buf_win_4_7, win_buf_win_4_8, win_buf_win_4_9_load_reg_2462, ap_CS_fsm_state4, ap_phi_mux_m_phi_fu_485_p4, exitcond2_fu_1271_p2, ap_condition_775)
    begin
        if (((exitcond2_fu_1271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
            if ((ap_const_boolean_1 = ap_condition_775)) then 
                ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18 <= win_buf_win_4_9_load_reg_2462;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_7)) then 
                ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18 <= win_buf_win_4_8;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_6)) then 
                ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18 <= win_buf_win_4_7;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_5)) then 
                ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18 <= win_buf_win_4_6;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_4)) then 
                ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18 <= win_buf_win_4_5;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_3)) then 
                ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18 <= win_buf_win_4_4;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_2)) then 
                ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18 <= win_buf_win_4_3;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_1)) then 
                ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18 <= win_buf_win_4_2;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_0)) then 
                ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18 <= win_buf_win_4_1;
            else 
                ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18 <= "XXXXXXXX";
            end if;
        else 
            ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18 <= "XXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18_assign_proc : process(win_buf_win_5_1, win_buf_win_5_2, win_buf_win_5_3, win_buf_win_5_4, win_buf_win_5_5, win_buf_win_5_6, win_buf_win_5_7, win_buf_win_5_8, win_buf_win_5_9_load_reg_2467, ap_CS_fsm_state4, ap_phi_mux_m_phi_fu_485_p4, exitcond2_fu_1271_p2, ap_condition_775)
    begin
        if (((exitcond2_fu_1271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
            if ((ap_const_boolean_1 = ap_condition_775)) then 
                ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18 <= win_buf_win_5_9_load_reg_2467;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_7)) then 
                ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18 <= win_buf_win_5_8;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_6)) then 
                ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18 <= win_buf_win_5_7;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_5)) then 
                ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18 <= win_buf_win_5_6;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_4)) then 
                ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18 <= win_buf_win_5_5;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_3)) then 
                ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18 <= win_buf_win_5_4;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_2)) then 
                ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18 <= win_buf_win_5_3;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_1)) then 
                ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18 <= win_buf_win_5_2;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_0)) then 
                ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18 <= win_buf_win_5_1;
            else 
                ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18 <= "XXXXXXXX";
            end if;
        else 
            ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18 <= "XXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18_assign_proc : process(win_buf_win_6_1, win_buf_win_6_2, win_buf_win_6_3, win_buf_win_6_4, win_buf_win_6_5, win_buf_win_6_6, win_buf_win_6_7, win_buf_win_6_8, win_buf_win_6_9_load_reg_2472, ap_CS_fsm_state4, ap_phi_mux_m_phi_fu_485_p4, exitcond2_fu_1271_p2, ap_condition_775)
    begin
        if (((exitcond2_fu_1271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
            if ((ap_const_boolean_1 = ap_condition_775)) then 
                ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18 <= win_buf_win_6_9_load_reg_2472;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_7)) then 
                ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18 <= win_buf_win_6_8;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_6)) then 
                ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18 <= win_buf_win_6_7;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_5)) then 
                ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18 <= win_buf_win_6_6;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_4)) then 
                ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18 <= win_buf_win_6_5;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_3)) then 
                ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18 <= win_buf_win_6_4;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_2)) then 
                ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18 <= win_buf_win_6_3;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_1)) then 
                ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18 <= win_buf_win_6_2;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_0)) then 
                ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18 <= win_buf_win_6_1;
            else 
                ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18 <= "XXXXXXXX";
            end if;
        else 
            ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18 <= "XXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18_assign_proc : process(win_buf_win_7_1, win_buf_win_7_2, win_buf_win_7_3, win_buf_win_7_4, win_buf_win_7_5, win_buf_win_7_6, win_buf_win_7_7, win_buf_win_7_8, win_buf_win_7_9_load_reg_2477, ap_CS_fsm_state4, ap_phi_mux_m_phi_fu_485_p4, exitcond2_fu_1271_p2, ap_condition_775)
    begin
        if (((exitcond2_fu_1271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
            if ((ap_const_boolean_1 = ap_condition_775)) then 
                ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18 <= win_buf_win_7_9_load_reg_2477;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_7)) then 
                ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18 <= win_buf_win_7_8;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_6)) then 
                ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18 <= win_buf_win_7_7;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_5)) then 
                ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18 <= win_buf_win_7_6;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_4)) then 
                ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18 <= win_buf_win_7_5;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_3)) then 
                ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18 <= win_buf_win_7_4;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_2)) then 
                ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18 <= win_buf_win_7_3;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_1)) then 
                ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18 <= win_buf_win_7_2;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_0)) then 
                ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18 <= win_buf_win_7_1;
            else 
                ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18 <= "XXXXXXXX";
            end if;
        else 
            ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18 <= "XXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18_assign_proc : process(win_buf_win_8_1, win_buf_win_8_2, win_buf_win_8_3, win_buf_win_8_4, win_buf_win_8_5, win_buf_win_8_6, win_buf_win_8_7, win_buf_win_8_8, win_buf_win_8_9_load_reg_2482, ap_CS_fsm_state4, ap_phi_mux_m_phi_fu_485_p4, exitcond2_fu_1271_p2, ap_condition_775)
    begin
        if (((exitcond2_fu_1271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
            if ((ap_const_boolean_1 = ap_condition_775)) then 
                ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18 <= win_buf_win_8_9_load_reg_2482;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_7)) then 
                ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18 <= win_buf_win_8_8;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_6)) then 
                ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18 <= win_buf_win_8_7;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_5)) then 
                ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18 <= win_buf_win_8_6;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_4)) then 
                ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18 <= win_buf_win_8_5;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_3)) then 
                ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18 <= win_buf_win_8_4;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_2)) then 
                ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18 <= win_buf_win_8_3;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_1)) then 
                ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18 <= win_buf_win_8_2;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_0)) then 
                ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18 <= win_buf_win_8_1;
            else 
                ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18 <= "XXXXXXXX";
            end if;
        else 
            ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18 <= "XXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18_assign_proc : process(win_buf_win_9_1, win_buf_win_9_2, win_buf_win_9_3, win_buf_win_9_4, win_buf_win_9_5, win_buf_win_9_6, win_buf_win_9_7, win_buf_win_9_8, win_buf_win_9_9_load_reg_2487, ap_CS_fsm_state4, ap_phi_mux_m_phi_fu_485_p4, exitcond2_fu_1271_p2, ap_condition_775)
    begin
        if (((exitcond2_fu_1271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
            if ((ap_const_boolean_1 = ap_condition_775)) then 
                ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18 <= win_buf_win_9_9_load_reg_2487;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_7)) then 
                ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18 <= win_buf_win_9_8;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_6)) then 
                ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18 <= win_buf_win_9_7;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_5)) then 
                ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18 <= win_buf_win_9_6;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_4)) then 
                ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18 <= win_buf_win_9_5;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_3)) then 
                ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18 <= win_buf_win_9_4;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_2)) then 
                ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18 <= win_buf_win_9_3;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_1)) then 
                ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18 <= win_buf_win_9_2;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_0)) then 
                ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18 <= win_buf_win_9_1;
            else 
                ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18 <= "XXXXXXXX";
            end if;
        else 
            ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18 <= "XXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18_assign_proc : process(win_buf_win_1_1, win_buf_win_1_2, win_buf_win_1_3, win_buf_win_1_4, win_buf_win_1_5, win_buf_win_1_6, win_buf_win_1_7, win_buf_win_1_8, win_buf_win_1_9_load_reg_2447, ap_CS_fsm_state4, ap_phi_mux_m_phi_fu_485_p4, exitcond2_fu_1271_p2, ap_condition_775)
    begin
        if (((exitcond2_fu_1271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
            if ((ap_const_boolean_1 = ap_condition_775)) then 
                ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18 <= win_buf_win_1_9_load_reg_2447;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_7)) then 
                ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18 <= win_buf_win_1_8;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_6)) then 
                ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18 <= win_buf_win_1_7;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_5)) then 
                ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18 <= win_buf_win_1_6;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_4)) then 
                ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18 <= win_buf_win_1_5;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_3)) then 
                ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18 <= win_buf_win_1_4;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_2)) then 
                ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18 <= win_buf_win_1_3;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_1)) then 
                ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18 <= win_buf_win_1_2;
            elsif ((ap_phi_mux_m_phi_fu_485_p4 = ap_const_lv4_0)) then 
                ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18 <= win_buf_win_1_1;
            else 
                ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18 <= "XXXXXXXX";
            end if;
        else 
            ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18 <= "XXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(OUTPUT_data_1_ack_in, OUTPUT_last_V_1_ack_in, ap_CS_fsm_state2, exitcond4_fu_1249_p2)
    begin
        if ((not(((ap_const_logic_0 = OUTPUT_last_V_1_ack_in) or (ap_const_logic_0 = OUTPUT_data_1_ack_in))) and (exitcond4_fu_1249_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond2_fu_1271_p2 <= "1" when (m_reg_481 = ap_const_lv4_9) else "0";
    exitcond3_fu_1823_p2 <= "1" when (ap_phi_mux_l_phi_fu_726_p4 = ap_const_lv4_A) else "0";
    exitcond4_fu_1249_p2 <= "1" when (p_012_rec_reg_457 = ap_const_lv16_9C40) else "0";
    exitcond5_fu_1921_p2 <= "1" when (y_reg_734 = ap_const_lv4_A) else "0";
    exitcond_fu_2373_p2 <= "1" when (j_reg_757 = ap_const_lv4_9) else "0";
    i_fu_1255_p2 <= std_logic_vector(unsigned(p_012_rec_reg_457) + unsigned(ap_const_lv16_1));
    j_1_fu_2379_p2 <= std_logic_vector(unsigned(j_reg_757) + unsigned(ap_const_lv4_1));
    k_1_fu_2385_p2 <= std_logic_vector(signed(k_reg_469) + signed(ap_const_lv32_1));
    l_1_fu_1829_p2 <= std_logic_vector(unsigned(ap_phi_mux_l_phi_fu_726_p4) + unsigned(ap_const_lv4_1));
    m_1_fu_1277_p2 <= std_logic_vector(unsigned(m_reg_481) + unsigned(ap_const_lv4_1));
    p_cast_fu_2357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_2351_p2),15));
    p_s_fu_2397_p3 <= 
        ap_const_lv32_0 when (tmp_5_fu_2391_p2(0) = '1') else 
        k_1_fu_2385_p2;

    row_buf_buf_0_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            row_buf_buf_0_ce0 <= ap_const_logic_1;
        else 
            row_buf_buf_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_buf_buf_0_we0_assign_proc : process(exitcond_reg_2588, j_reg_757, ap_CS_fsm_state14)
    begin
        if (((j_reg_757 = ap_const_lv4_0) and (exitcond_reg_2588 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            row_buf_buf_0_we0 <= ap_const_logic_1;
        else 
            row_buf_buf_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    row_buf_buf_1_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            row_buf_buf_1_ce0 <= ap_const_logic_1;
        else 
            row_buf_buf_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_buf_buf_1_we0_assign_proc : process(exitcond_reg_2588, j_reg_757, ap_CS_fsm_state14)
    begin
        if (((j_reg_757 = ap_const_lv4_1) and (exitcond_reg_2588 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            row_buf_buf_1_we0 <= ap_const_logic_1;
        else 
            row_buf_buf_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    row_buf_buf_2_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            row_buf_buf_2_ce0 <= ap_const_logic_1;
        else 
            row_buf_buf_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_buf_buf_2_we0_assign_proc : process(exitcond_reg_2588, j_reg_757, ap_CS_fsm_state14)
    begin
        if (((j_reg_757 = ap_const_lv4_2) and (exitcond_reg_2588 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            row_buf_buf_2_we0 <= ap_const_logic_1;
        else 
            row_buf_buf_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    row_buf_buf_3_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            row_buf_buf_3_ce0 <= ap_const_logic_1;
        else 
            row_buf_buf_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_buf_buf_3_we0_assign_proc : process(exitcond_reg_2588, j_reg_757, ap_CS_fsm_state14)
    begin
        if (((j_reg_757 = ap_const_lv4_3) and (exitcond_reg_2588 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            row_buf_buf_3_we0 <= ap_const_logic_1;
        else 
            row_buf_buf_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    row_buf_buf_4_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            row_buf_buf_4_ce0 <= ap_const_logic_1;
        else 
            row_buf_buf_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_buf_buf_4_we0_assign_proc : process(exitcond_reg_2588, j_reg_757, ap_CS_fsm_state14)
    begin
        if (((j_reg_757 = ap_const_lv4_4) and (exitcond_reg_2588 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            row_buf_buf_4_we0 <= ap_const_logic_1;
        else 
            row_buf_buf_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    row_buf_buf_5_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            row_buf_buf_5_ce0 <= ap_const_logic_1;
        else 
            row_buf_buf_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_buf_buf_5_we0_assign_proc : process(exitcond_reg_2588, j_reg_757, ap_CS_fsm_state14)
    begin
        if (((j_reg_757 = ap_const_lv4_5) and (exitcond_reg_2588 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            row_buf_buf_5_we0 <= ap_const_logic_1;
        else 
            row_buf_buf_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    row_buf_buf_6_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            row_buf_buf_6_ce0 <= ap_const_logic_1;
        else 
            row_buf_buf_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_buf_buf_6_we0_assign_proc : process(exitcond_reg_2588, j_reg_757, ap_CS_fsm_state14)
    begin
        if (((j_reg_757 = ap_const_lv4_6) and (exitcond_reg_2588 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            row_buf_buf_6_we0 <= ap_const_logic_1;
        else 
            row_buf_buf_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    row_buf_buf_7_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            row_buf_buf_7_ce0 <= ap_const_logic_1;
        else 
            row_buf_buf_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_buf_buf_7_we0_assign_proc : process(exitcond_reg_2588, j_reg_757, ap_CS_fsm_state14)
    begin
        if (((j_reg_757 = ap_const_lv4_7) and (exitcond_reg_2588 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            row_buf_buf_7_we0 <= ap_const_logic_1;
        else 
            row_buf_buf_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    row_buf_buf_8_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            row_buf_buf_8_ce0 <= ap_const_logic_1;
        else 
            row_buf_buf_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_buf_buf_8_we0_assign_proc : process(exitcond_reg_2588, j_reg_757, ap_CS_fsm_state14)
    begin
        if ((not((j_reg_757 = ap_const_lv4_7)) and not((j_reg_757 = ap_const_lv4_6)) and not((j_reg_757 = ap_const_lv4_5)) and not((j_reg_757 = ap_const_lv4_4)) and not((j_reg_757 = ap_const_lv4_3)) and not((j_reg_757 = ap_const_lv4_2)) and not((j_reg_757 = ap_const_lv4_1)) and not((j_reg_757 = ap_const_lv4_0)) and (exitcond_reg_2588 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            row_buf_buf_8_we0 <= ap_const_logic_1;
        else 
            row_buf_buf_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    row_buf_buf_9_address0_assign_proc : process(ap_CS_fsm_state3, tmp_fu_1266_p1, row_buf_buf_9_addr_reg_2437, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state11, ap_block_pp1_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            row_buf_buf_9_address0 <= row_buf_buf_9_addr_reg_2437;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            row_buf_buf_9_address0 <= tmp_fu_1266_p1(8 - 1 downto 0);
        else 
            row_buf_buf_9_address0 <= "XXXXXXXX";
        end if; 
    end process;


    row_buf_buf_9_ce0_assign_proc : process(INPUT_data_0_vld_out, ap_CS_fsm_state3, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_logic_1 = INPUT_data_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            row_buf_buf_9_ce0 <= ap_const_logic_1;
        else 
            row_buf_buf_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_buf_buf_9_we0_assign_proc : process(INPUT_data_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = INPUT_data_0_vld_out) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            row_buf_buf_9_we0 <= ap_const_logic_1;
        else 
            row_buf_buf_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sad_2_9_fu_2361_p2 <= std_logic_vector(unsigned(sad_reg_745) + unsigned(p_cast_fu_2357_p1));
    tmp10_cast_fu_2315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_2309_p2),11));
    tmp11_cast_fu_2335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp3_fu_2329_p2),11));
    tmp12_cast_fu_2325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_2319_p2),10));
    tmp1_fu_2309_p2 <= std_logic_vector(unsigned(absl_5_cast_fu_2149_p1) + unsigned(absl_6_cast_fu_2179_p1));
    tmp2_fu_2319_p2 <= std_logic_vector(unsigned(absl_8_cast_fu_2239_p1) + unsigned(absl_9_cast_fu_2269_p1));
    tmp3_fu_2329_p2 <= std_logic_vector(unsigned(tmp12_cast_fu_2325_p1) + unsigned(absl_7_cast_fu_2209_p1));
    tmp5_cast_fu_2345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp5_reg_2563),12));
    tmp5_fu_2303_p2 <= std_logic_vector(unsigned(tmp7_cast_fu_2299_p1) + unsigned(tmp6_cast_fu_2279_p1));
    tmp6_cast_fu_2279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp6_fu_2273_p2),11));
    tmp6_fu_2273_p2 <= std_logic_vector(unsigned(absl_cast_fu_1999_p1) + unsigned(absl_1_cast_fu_2029_p1));
    tmp7_cast_fu_2299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp7_fu_2293_p2),11));
    tmp7_fu_2293_p2 <= std_logic_vector(unsigned(tmp8_cast_fu_2289_p1) + unsigned(absl_2_cast_fu_2059_p1));
    tmp8_cast_fu_2289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp8_fu_2283_p2),10));
    tmp8_fu_2283_p2 <= std_logic_vector(unsigned(absl_3_cast_fu_2089_p1) + unsigned(absl_4_cast_fu_2119_p1));
    tmp9_cast_fu_2348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp9_reg_2568),12));
    tmp9_fu_2339_p2 <= std_logic_vector(unsigned(tmp11_cast_fu_2335_p1) + unsigned(tmp10_cast_fu_2315_p1));
    tmp_19_fu_2351_p2 <= std_logic_vector(unsigned(tmp9_cast_fu_2348_p1) + unsigned(tmp5_cast_fu_2345_p1));
    tmp_5_fu_2391_p2 <= "1" when (k_1_fu_2385_p2 = ap_const_lv32_C8) else "0";
    tmp_7_fu_2405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_2578),8));
    tmp_8_fu_2367_p2 <= "1" when (sad_reg_745 = ap_const_lv15_0) else "0";
        tmp_fu_1266_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(k_reg_469),64));

    tmp_s_fu_2409_p2 <= "1" when (p_012_rec_reg_457 = ap_const_lv16_9C3F) else "0";
    y_1_fu_1927_p2 <= std_logic_vector(unsigned(y_reg_734) + unsigned(ap_const_lv4_1));
end behav;
