// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="SAD_MATCH,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.534100,HLS_SYN_LAT=2360001,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=0,HLS_SYN_FF=1303,HLS_SYN_LUT=1921,HLS_VERSION=2018_2}" *)

module SAD_MATCH (
        ap_clk,
        ap_rst_n,
        INPUT_r_TDATA,
        INPUT_r_TVALID,
        INPUT_r_TREADY,
        INPUT_r_TLAST,
        OUTPUT_r_TDATA,
        OUTPUT_r_TVALID,
        OUTPUT_r_TREADY,
        OUTPUT_r_TLAST,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_pp1_stage0 = 14'd32;
parameter    ap_ST_fsm_state8 = 14'd64;
parameter    ap_ST_fsm_pp2_stage0 = 14'd128;
parameter    ap_ST_fsm_state11 = 14'd256;
parameter    ap_ST_fsm_state12 = 14'd512;
parameter    ap_ST_fsm_state13 = 14'd1024;
parameter    ap_ST_fsm_state14 = 14'd2048;
parameter    ap_ST_fsm_state15 = 14'd4096;
parameter    ap_ST_fsm_state16 = 14'd8192;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [7:0] INPUT_r_TDATA;
input   INPUT_r_TVALID;
output   INPUT_r_TREADY;
input  [0:0] INPUT_r_TLAST;
output  [7:0] OUTPUT_r_TDATA;
output   OUTPUT_r_TVALID;
input   OUTPUT_r_TREADY;
output  [0:0] OUTPUT_r_TLAST;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [7:0] INPUT_data_0_data_out;
wire    INPUT_data_0_vld_in;
wire    INPUT_data_0_vld_out;
wire    INPUT_data_0_ack_in;
reg    INPUT_data_0_ack_out;
reg   [7:0] INPUT_data_0_payload_A;
reg   [7:0] INPUT_data_0_payload_B;
reg    INPUT_data_0_sel_rd;
reg    INPUT_data_0_sel_wr;
wire    INPUT_data_0_sel;
wire    INPUT_data_0_load_A;
wire    INPUT_data_0_load_B;
reg   [1:0] INPUT_data_0_state;
wire    INPUT_data_0_state_cmp_full;
wire    INPUT_last_V_0_vld_in;
reg    INPUT_last_V_0_ack_out;
reg   [1:0] INPUT_last_V_0_state;
reg   [7:0] OUTPUT_data_1_data_out;
reg    OUTPUT_data_1_vld_in;
wire    OUTPUT_data_1_vld_out;
wire    OUTPUT_data_1_ack_in;
wire    OUTPUT_data_1_ack_out;
reg   [7:0] OUTPUT_data_1_payload_A;
reg   [7:0] OUTPUT_data_1_payload_B;
reg    OUTPUT_data_1_sel_rd;
reg    OUTPUT_data_1_sel_wr;
wire    OUTPUT_data_1_sel;
wire    OUTPUT_data_1_load_A;
wire    OUTPUT_data_1_load_B;
reg   [1:0] OUTPUT_data_1_state;
wire    OUTPUT_data_1_state_cmp_full;
reg   [0:0] OUTPUT_last_V_1_data_out;
reg    OUTPUT_last_V_1_vld_in;
wire    OUTPUT_last_V_1_vld_out;
wire    OUTPUT_last_V_1_ack_in;
wire    OUTPUT_last_V_1_ack_out;
reg   [0:0] OUTPUT_last_V_1_payload_A;
reg   [0:0] OUTPUT_last_V_1_payload_B;
reg    OUTPUT_last_V_1_sel_rd;
reg    OUTPUT_last_V_1_sel_wr;
wire    OUTPUT_last_V_1_sel;
wire    OUTPUT_last_V_1_load_A;
wire    OUTPUT_last_V_1_load_B;
reg   [1:0] OUTPUT_last_V_1_state;
wire    OUTPUT_last_V_1_state_cmp_full;
reg   [7:0] row_buf_buf_9_address0;
reg    row_buf_buf_9_ce0;
reg    row_buf_buf_9_we0;
wire   [7:0] row_buf_buf_9_q0;
reg   [7:0] win_buf_win_0_9;
reg   [7:0] win_buf_win_1_9;
reg   [7:0] win_buf_win_2_9;
reg   [7:0] win_buf_win_3_9;
reg   [7:0] win_buf_win_4_9;
reg   [7:0] win_buf_win_5_9;
reg   [7:0] win_buf_win_6_9;
reg   [7:0] win_buf_win_7_9;
reg   [7:0] win_buf_win_8_9;
reg   [7:0] win_buf_win_9_9;
reg    row_buf_buf_0_ce0;
reg    row_buf_buf_0_we0;
wire   [7:0] row_buf_buf_0_q0;
reg    row_buf_buf_1_ce0;
reg    row_buf_buf_1_we0;
wire   [7:0] row_buf_buf_1_q0;
reg    row_buf_buf_2_ce0;
reg    row_buf_buf_2_we0;
wire   [7:0] row_buf_buf_2_q0;
reg    row_buf_buf_3_ce0;
reg    row_buf_buf_3_we0;
wire   [7:0] row_buf_buf_3_q0;
reg    row_buf_buf_4_ce0;
reg    row_buf_buf_4_we0;
wire   [7:0] row_buf_buf_4_q0;
reg    row_buf_buf_5_ce0;
reg    row_buf_buf_5_we0;
wire   [7:0] row_buf_buf_5_q0;
reg    row_buf_buf_6_ce0;
reg    row_buf_buf_6_we0;
wire   [7:0] row_buf_buf_6_q0;
reg    row_buf_buf_7_ce0;
reg    row_buf_buf_7_we0;
wire   [7:0] row_buf_buf_7_q0;
reg    row_buf_buf_8_ce0;
reg    row_buf_buf_8_we0;
wire   [7:0] row_buf_buf_8_q0;
reg   [7:0] win_buf_win_0_0;
reg   [7:0] win_buf_win_1_0;
reg   [7:0] win_buf_win_2_0;
reg   [7:0] win_buf_win_3_0;
reg   [7:0] win_buf_win_4_0;
reg   [7:0] win_buf_win_5_0;
reg   [7:0] win_buf_win_6_0;
reg   [7:0] win_buf_win_7_0;
reg   [7:0] win_buf_win_8_0;
reg   [7:0] win_buf_win_9_0;
reg   [7:0] win_buf_win_0_1;
reg   [7:0] win_buf_win_1_1;
reg   [7:0] win_buf_win_2_1;
reg   [7:0] win_buf_win_3_1;
reg   [7:0] win_buf_win_4_1;
reg   [7:0] win_buf_win_5_1;
reg   [7:0] win_buf_win_6_1;
reg   [7:0] win_buf_win_7_1;
reg   [7:0] win_buf_win_8_1;
reg   [7:0] win_buf_win_9_1;
reg   [7:0] win_buf_win_0_2;
reg   [7:0] win_buf_win_1_2;
reg   [7:0] win_buf_win_2_2;
reg   [7:0] win_buf_win_3_2;
reg   [7:0] win_buf_win_4_2;
reg   [7:0] win_buf_win_5_2;
reg   [7:0] win_buf_win_6_2;
reg   [7:0] win_buf_win_7_2;
reg   [7:0] win_buf_win_8_2;
reg   [7:0] win_buf_win_9_2;
reg   [7:0] win_buf_win_0_3;
reg   [7:0] win_buf_win_1_3;
reg   [7:0] win_buf_win_2_3;
reg   [7:0] win_buf_win_3_3;
reg   [7:0] win_buf_win_4_3;
reg   [7:0] win_buf_win_5_3;
reg   [7:0] win_buf_win_6_3;
reg   [7:0] win_buf_win_7_3;
reg   [7:0] win_buf_win_8_3;
reg   [7:0] win_buf_win_9_3;
reg   [7:0] win_buf_win_0_4;
reg   [7:0] win_buf_win_1_4;
reg   [7:0] win_buf_win_2_4;
reg   [7:0] win_buf_win_3_4;
reg   [7:0] win_buf_win_4_4;
reg   [7:0] win_buf_win_5_4;
reg   [7:0] win_buf_win_6_4;
reg   [7:0] win_buf_win_7_4;
reg   [7:0] win_buf_win_8_4;
reg   [7:0] win_buf_win_9_4;
reg   [7:0] win_buf_win_0_5;
reg   [7:0] win_buf_win_1_5;
reg   [7:0] win_buf_win_2_5;
reg   [7:0] win_buf_win_3_5;
reg   [7:0] win_buf_win_4_5;
reg   [7:0] win_buf_win_5_5;
reg   [7:0] win_buf_win_6_5;
reg   [7:0] win_buf_win_7_5;
reg   [7:0] win_buf_win_8_5;
reg   [7:0] win_buf_win_9_5;
reg   [7:0] win_buf_win_0_6;
reg   [7:0] win_buf_win_1_6;
reg   [7:0] win_buf_win_2_6;
reg   [7:0] win_buf_win_3_6;
reg   [7:0] win_buf_win_4_6;
reg   [7:0] win_buf_win_5_6;
reg   [7:0] win_buf_win_6_6;
reg   [7:0] win_buf_win_7_6;
reg   [7:0] win_buf_win_8_6;
reg   [7:0] win_buf_win_9_6;
reg   [7:0] win_buf_win_0_7;
reg   [7:0] win_buf_win_1_7;
reg   [7:0] win_buf_win_2_7;
reg   [7:0] win_buf_win_3_7;
reg   [7:0] win_buf_win_4_7;
reg   [7:0] win_buf_win_5_7;
reg   [7:0] win_buf_win_6_7;
reg   [7:0] win_buf_win_7_7;
reg   [7:0] win_buf_win_8_7;
reg   [7:0] win_buf_win_9_7;
reg   [7:0] win_buf_win_0_8;
reg   [7:0] win_buf_win_1_8;
reg   [7:0] win_buf_win_2_8;
reg   [7:0] win_buf_win_3_8;
reg   [7:0] win_buf_win_4_8;
reg   [7:0] win_buf_win_5_8;
reg   [7:0] win_buf_win_6_8;
reg   [7:0] win_buf_win_7_8;
reg   [7:0] win_buf_win_8_8;
reg   [7:0] win_buf_win_9_8;
reg    INPUT_r_TDATA_blk_n;
wire    ap_CS_fsm_state3;
reg    OUTPUT_r_TDATA_blk_n;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
reg   [3:0] l_reg_722;
reg   [3:0] y_reg_734;
reg   [14:0] sad_reg_745;
wire   [15:0] i_fu_1255_p2;
reg   [15:0] i_reg_2419;
wire    ap_CS_fsm_state2;
reg    ap_block_state2;
wire  signed [63:0] tmp_fu_1266_p1;
reg  signed [63:0] tmp_reg_2424;
reg   [7:0] row_buf_buf_9_addr_reg_2437;
reg   [7:0] win_buf_win_0_9_load_reg_2442;
reg   [7:0] win_buf_win_1_9_load_reg_2447;
reg   [7:0] win_buf_win_2_9_load_reg_2452;
reg   [7:0] win_buf_win_3_9_load_reg_2457;
reg   [7:0] win_buf_win_4_9_load_reg_2462;
reg   [7:0] win_buf_win_5_9_load_reg_2467;
reg   [7:0] win_buf_win_6_9_load_reg_2472;
reg   [7:0] win_buf_win_7_9_load_reg_2477;
reg   [7:0] win_buf_win_8_9_load_reg_2482;
reg   [7:0] win_buf_win_9_9_load_reg_2487;
wire   [3:0] m_1_fu_1277_p2;
wire    ap_CS_fsm_state4;
reg   [7:0] row_buf_buf_0_addr_reg_2500;
wire    ap_CS_fsm_state5;
reg   [7:0] row_buf_buf_1_addr_reg_2505;
reg   [7:0] row_buf_buf_2_addr_reg_2510;
reg   [7:0] row_buf_buf_3_addr_reg_2515;
reg   [7:0] row_buf_buf_4_addr_reg_2520;
reg   [7:0] row_buf_buf_5_addr_reg_2525;
reg   [7:0] row_buf_buf_6_addr_reg_2530;
reg   [7:0] row_buf_buf_7_addr_reg_2535;
reg   [7:0] row_buf_buf_8_addr_reg_2540;
wire   [0:0] exitcond3_fu_1823_p2;
reg   [0:0] exitcond3_reg_2545;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state6_pp1_stage0_iter0;
wire    ap_block_state7_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [3:0] l_1_fu_1829_p2;
reg   [3:0] l_1_reg_2549;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] exitcond5_fu_1921_p2;
reg   [0:0] exitcond5_reg_2554;
wire    ap_CS_fsm_pp2_stage0;
wire    ap_block_state9_pp2_stage0_iter0;
wire    ap_block_state10_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [3:0] y_1_fu_1927_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [10:0] tmp5_fu_2303_p2;
reg   [10:0] tmp5_reg_2563;
wire   [10:0] tmp9_fu_2339_p2;
reg   [10:0] tmp9_reg_2568;
wire   [14:0] sad_2_9_fu_2361_p2;
reg    ap_enable_reg_pp2_iter1;
wire   [0:0] tmp_8_fu_2367_p2;
reg   [0:0] tmp_8_reg_2578;
wire    ap_CS_fsm_state11;
reg   [7:0] row_buf_buf_9_load_reg_2583;
wire    ap_CS_fsm_state12;
wire   [0:0] exitcond_fu_2373_p2;
reg   [0:0] exitcond_reg_2588;
wire    ap_CS_fsm_state13;
wire   [3:0] j_1_fu_2379_p2;
reg   [3:0] j_1_reg_2592;
wire   [31:0] p_s_fu_2397_p3;
reg   [31:0] p_s_reg_2597;
wire   [7:0] tmp_7_fu_2405_p1;
wire   [0:0] tmp_s_fu_2409_p2;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state8;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state9;
reg   [15:0] p_012_rec_reg_457;
reg  signed [31:0] k_reg_469;
wire   [3:0] ap_phi_mux_m_phi_fu_485_p4;
reg   [3:0] m_reg_481;
wire   [0:0] exitcond2_fu_1271_p2;
reg   [7:0] ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18;
reg   [7:0] ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18;
reg   [7:0] ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18;
reg   [7:0] ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18;
reg   [7:0] ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18;
reg   [7:0] ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18;
reg   [7:0] ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18;
reg   [7:0] ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18;
reg   [7:0] ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18;
reg   [7:0] ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18;
reg   [3:0] ap_phi_mux_l_phi_fu_726_p4;
wire    ap_block_pp1_stage0;
wire    ap_block_pp2_stage0;
wire   [3:0] ap_phi_mux_j_phi_fu_761_p4;
reg   [3:0] j_reg_757;
wire    ap_CS_fsm_state14;
reg   [7:0] ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18;
reg   [7:0] row_buf_buf_load_1_p_reg_769;
wire   [7:0] tmp_2_fu_1835_p12;
wire   [7:0] tmp_4_fu_1973_p12;
wire   [7:0] tmp_9_fu_2003_p12;
wire   [7:0] tmp_11_fu_2033_p12;
wire   [7:0] tmp_12_fu_2063_p12;
wire   [7:0] tmp_13_fu_2093_p12;
wire   [7:0] tmp_14_fu_2123_p12;
wire   [7:0] tmp_15_fu_2153_p12;
wire   [7:0] tmp_16_fu_2183_p12;
wire   [7:0] tmp_17_fu_2213_p12;
wire   [7:0] tmp_18_fu_2243_p12;
wire   [8:0] absl_cast_fu_1999_p1;
wire   [8:0] absl_1_cast_fu_2029_p1;
wire   [8:0] tmp6_fu_2273_p2;
wire   [8:0] absl_3_cast_fu_2089_p1;
wire   [8:0] absl_4_cast_fu_2119_p1;
wire   [8:0] tmp8_fu_2283_p2;
wire   [9:0] tmp8_cast_fu_2289_p1;
wire   [9:0] absl_2_cast_fu_2059_p1;
wire   [9:0] tmp7_fu_2293_p2;
wire   [10:0] tmp7_cast_fu_2299_p1;
wire   [10:0] tmp6_cast_fu_2279_p1;
wire   [8:0] absl_5_cast_fu_2149_p1;
wire   [8:0] absl_6_cast_fu_2179_p1;
wire   [8:0] tmp1_fu_2309_p2;
wire   [8:0] absl_8_cast_fu_2239_p1;
wire   [8:0] absl_9_cast_fu_2269_p1;
wire   [8:0] tmp2_fu_2319_p2;
wire   [9:0] tmp12_cast_fu_2325_p1;
wire   [9:0] absl_7_cast_fu_2209_p1;
wire   [9:0] tmp3_fu_2329_p2;
wire   [10:0] tmp11_cast_fu_2335_p1;
wire   [10:0] tmp10_cast_fu_2315_p1;
wire   [11:0] tmp9_cast_fu_2348_p1;
wire   [11:0] tmp5_cast_fu_2345_p1;
wire   [11:0] tmp_19_fu_2351_p2;
wire   [14:0] p_cast_fu_2357_p1;
wire   [31:0] k_1_fu_2385_p2;
wire   [0:0] tmp_5_fu_2391_p2;
wire   [0:0] exitcond4_fu_1249_p2;
reg   [13:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_condition_775;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 INPUT_data_0_sel_rd = 1'b0;
#0 INPUT_data_0_sel_wr = 1'b0;
#0 INPUT_data_0_state = 2'd0;
#0 INPUT_last_V_0_state = 2'd0;
#0 OUTPUT_data_1_sel_rd = 1'b0;
#0 OUTPUT_data_1_sel_wr = 1'b0;
#0 OUTPUT_data_1_state = 2'd0;
#0 OUTPUT_last_V_1_sel_rd = 1'b0;
#0 OUTPUT_last_V_1_sel_wr = 1'b0;
#0 OUTPUT_last_V_1_state = 2'd0;
#0 win_buf_win_0_9 = 8'd0;
#0 win_buf_win_1_9 = 8'd0;
#0 win_buf_win_2_9 = 8'd0;
#0 win_buf_win_3_9 = 8'd0;
#0 win_buf_win_4_9 = 8'd0;
#0 win_buf_win_5_9 = 8'd0;
#0 win_buf_win_6_9 = 8'd0;
#0 win_buf_win_7_9 = 8'd0;
#0 win_buf_win_8_9 = 8'd0;
#0 win_buf_win_9_9 = 8'd0;
#0 win_buf_win_0_0 = 8'd0;
#0 win_buf_win_1_0 = 8'd0;
#0 win_buf_win_2_0 = 8'd0;
#0 win_buf_win_3_0 = 8'd0;
#0 win_buf_win_4_0 = 8'd0;
#0 win_buf_win_5_0 = 8'd0;
#0 win_buf_win_6_0 = 8'd0;
#0 win_buf_win_7_0 = 8'd0;
#0 win_buf_win_8_0 = 8'd0;
#0 win_buf_win_9_0 = 8'd0;
#0 win_buf_win_0_1 = 8'd0;
#0 win_buf_win_1_1 = 8'd0;
#0 win_buf_win_2_1 = 8'd0;
#0 win_buf_win_3_1 = 8'd0;
#0 win_buf_win_4_1 = 8'd0;
#0 win_buf_win_5_1 = 8'd0;
#0 win_buf_win_6_1 = 8'd0;
#0 win_buf_win_7_1 = 8'd0;
#0 win_buf_win_8_1 = 8'd0;
#0 win_buf_win_9_1 = 8'd0;
#0 win_buf_win_0_2 = 8'd0;
#0 win_buf_win_1_2 = 8'd0;
#0 win_buf_win_2_2 = 8'd0;
#0 win_buf_win_3_2 = 8'd0;
#0 win_buf_win_4_2 = 8'd0;
#0 win_buf_win_5_2 = 8'd0;
#0 win_buf_win_6_2 = 8'd0;
#0 win_buf_win_7_2 = 8'd0;
#0 win_buf_win_8_2 = 8'd0;
#0 win_buf_win_9_2 = 8'd0;
#0 win_buf_win_0_3 = 8'd0;
#0 win_buf_win_1_3 = 8'd0;
#0 win_buf_win_2_3 = 8'd0;
#0 win_buf_win_3_3 = 8'd0;
#0 win_buf_win_4_3 = 8'd0;
#0 win_buf_win_5_3 = 8'd0;
#0 win_buf_win_6_3 = 8'd0;
#0 win_buf_win_7_3 = 8'd0;
#0 win_buf_win_8_3 = 8'd0;
#0 win_buf_win_9_3 = 8'd0;
#0 win_buf_win_0_4 = 8'd0;
#0 win_buf_win_1_4 = 8'd0;
#0 win_buf_win_2_4 = 8'd0;
#0 win_buf_win_3_4 = 8'd0;
#0 win_buf_win_4_4 = 8'd0;
#0 win_buf_win_5_4 = 8'd0;
#0 win_buf_win_6_4 = 8'd0;
#0 win_buf_win_7_4 = 8'd0;
#0 win_buf_win_8_4 = 8'd0;
#0 win_buf_win_9_4 = 8'd0;
#0 win_buf_win_0_5 = 8'd0;
#0 win_buf_win_1_5 = 8'd0;
#0 win_buf_win_2_5 = 8'd0;
#0 win_buf_win_3_5 = 8'd0;
#0 win_buf_win_4_5 = 8'd0;
#0 win_buf_win_5_5 = 8'd0;
#0 win_buf_win_6_5 = 8'd0;
#0 win_buf_win_7_5 = 8'd0;
#0 win_buf_win_8_5 = 8'd0;
#0 win_buf_win_9_5 = 8'd0;
#0 win_buf_win_0_6 = 8'd0;
#0 win_buf_win_1_6 = 8'd0;
#0 win_buf_win_2_6 = 8'd0;
#0 win_buf_win_3_6 = 8'd0;
#0 win_buf_win_4_6 = 8'd0;
#0 win_buf_win_5_6 = 8'd0;
#0 win_buf_win_6_6 = 8'd0;
#0 win_buf_win_7_6 = 8'd0;
#0 win_buf_win_8_6 = 8'd0;
#0 win_buf_win_9_6 = 8'd0;
#0 win_buf_win_0_7 = 8'd0;
#0 win_buf_win_1_7 = 8'd0;
#0 win_buf_win_2_7 = 8'd0;
#0 win_buf_win_3_7 = 8'd0;
#0 win_buf_win_4_7 = 8'd0;
#0 win_buf_win_5_7 = 8'd0;
#0 win_buf_win_6_7 = 8'd0;
#0 win_buf_win_7_7 = 8'd0;
#0 win_buf_win_8_7 = 8'd0;
#0 win_buf_win_9_7 = 8'd0;
#0 win_buf_win_0_8 = 8'd0;
#0 win_buf_win_1_8 = 8'd0;
#0 win_buf_win_2_8 = 8'd0;
#0 win_buf_win_3_8 = 8'd0;
#0 win_buf_win_4_8 = 8'd0;
#0 win_buf_win_5_8 = 8'd0;
#0 win_buf_win_6_8 = 8'd0;
#0 win_buf_win_7_8 = 8'd0;
#0 win_buf_win_8_8 = 8'd0;
#0 win_buf_win_9_8 = 8'd0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

SAD_MATCH_row_bufbkb #(
    .DataWidth( 8 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
row_buf_buf_9_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(row_buf_buf_9_address0),
    .ce0(row_buf_buf_9_ce0),
    .we0(row_buf_buf_9_we0),
    .d0(INPUT_data_0_data_out),
    .q0(row_buf_buf_9_q0)
);

SAD_MATCH_row_bufbkb #(
    .DataWidth( 8 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
row_buf_buf_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(row_buf_buf_0_addr_reg_2500),
    .ce0(row_buf_buf_0_ce0),
    .we0(row_buf_buf_0_we0),
    .d0(ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18),
    .q0(row_buf_buf_0_q0)
);

SAD_MATCH_row_bufbkb #(
    .DataWidth( 8 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
row_buf_buf_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(row_buf_buf_1_addr_reg_2505),
    .ce0(row_buf_buf_1_ce0),
    .we0(row_buf_buf_1_we0),
    .d0(ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18),
    .q0(row_buf_buf_1_q0)
);

SAD_MATCH_row_bufbkb #(
    .DataWidth( 8 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
row_buf_buf_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(row_buf_buf_2_addr_reg_2510),
    .ce0(row_buf_buf_2_ce0),
    .we0(row_buf_buf_2_we0),
    .d0(ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18),
    .q0(row_buf_buf_2_q0)
);

SAD_MATCH_row_bufbkb #(
    .DataWidth( 8 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
row_buf_buf_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(row_buf_buf_3_addr_reg_2515),
    .ce0(row_buf_buf_3_ce0),
    .we0(row_buf_buf_3_we0),
    .d0(ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18),
    .q0(row_buf_buf_3_q0)
);

SAD_MATCH_row_bufbkb #(
    .DataWidth( 8 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
row_buf_buf_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(row_buf_buf_4_addr_reg_2520),
    .ce0(row_buf_buf_4_ce0),
    .we0(row_buf_buf_4_we0),
    .d0(ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18),
    .q0(row_buf_buf_4_q0)
);

SAD_MATCH_row_bufbkb #(
    .DataWidth( 8 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
row_buf_buf_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(row_buf_buf_5_addr_reg_2525),
    .ce0(row_buf_buf_5_ce0),
    .we0(row_buf_buf_5_we0),
    .d0(ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18),
    .q0(row_buf_buf_5_q0)
);

SAD_MATCH_row_bufbkb #(
    .DataWidth( 8 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
row_buf_buf_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(row_buf_buf_6_addr_reg_2530),
    .ce0(row_buf_buf_6_ce0),
    .we0(row_buf_buf_6_we0),
    .d0(ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18),
    .q0(row_buf_buf_6_q0)
);

SAD_MATCH_row_bufbkb #(
    .DataWidth( 8 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
row_buf_buf_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(row_buf_buf_7_addr_reg_2535),
    .ce0(row_buf_buf_7_ce0),
    .we0(row_buf_buf_7_we0),
    .d0(ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18),
    .q0(row_buf_buf_7_q0)
);

SAD_MATCH_row_bufbkb #(
    .DataWidth( 8 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
row_buf_buf_8_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(row_buf_buf_8_addr_reg_2540),
    .ce0(row_buf_buf_8_ce0),
    .we0(row_buf_buf_8_we0),
    .d0(ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18),
    .q0(row_buf_buf_8_q0)
);

SAD_MATCH_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
SAD_MATCH_CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

SAD_MATCH_mux_104lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
SAD_MATCH_mux_104lbW_U1(
    .din0(row_buf_buf_0_q0),
    .din1(row_buf_buf_1_q0),
    .din2(row_buf_buf_2_q0),
    .din3(row_buf_buf_3_q0),
    .din4(row_buf_buf_4_q0),
    .din5(row_buf_buf_5_q0),
    .din6(row_buf_buf_6_q0),
    .din7(row_buf_buf_7_q0),
    .din8(row_buf_buf_8_q0),
    .din9(row_buf_buf_9_q0),
    .din10(l_reg_722),
    .dout(tmp_2_fu_1835_p12)
);

SAD_MATCH_mux_104lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
SAD_MATCH_mux_104lbW_U2(
    .din0(win_buf_win_0_0),
    .din1(win_buf_win_1_0),
    .din2(win_buf_win_2_0),
    .din3(win_buf_win_3_0),
    .din4(win_buf_win_4_0),
    .din5(win_buf_win_5_0),
    .din6(win_buf_win_6_0),
    .din7(win_buf_win_7_0),
    .din8(win_buf_win_8_0),
    .din9(win_buf_win_9_0),
    .din10(y_reg_734),
    .dout(tmp_4_fu_1973_p12)
);

SAD_MATCH_mux_104lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
SAD_MATCH_mux_104lbW_U3(
    .din0(win_buf_win_0_1),
    .din1(win_buf_win_1_1),
    .din2(win_buf_win_2_1),
    .din3(win_buf_win_3_1),
    .din4(win_buf_win_4_1),
    .din5(win_buf_win_5_1),
    .din6(win_buf_win_6_1),
    .din7(win_buf_win_7_1),
    .din8(win_buf_win_8_1),
    .din9(win_buf_win_9_1),
    .din10(y_reg_734),
    .dout(tmp_9_fu_2003_p12)
);

SAD_MATCH_mux_104lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
SAD_MATCH_mux_104lbW_U4(
    .din0(win_buf_win_0_2),
    .din1(win_buf_win_1_2),
    .din2(win_buf_win_2_2),
    .din3(win_buf_win_3_2),
    .din4(win_buf_win_4_2),
    .din5(win_buf_win_5_2),
    .din6(win_buf_win_6_2),
    .din7(win_buf_win_7_2),
    .din8(win_buf_win_8_2),
    .din9(win_buf_win_9_2),
    .din10(y_reg_734),
    .dout(tmp_11_fu_2033_p12)
);

SAD_MATCH_mux_104lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
SAD_MATCH_mux_104lbW_U5(
    .din0(win_buf_win_0_3),
    .din1(win_buf_win_1_3),
    .din2(win_buf_win_2_3),
    .din3(win_buf_win_3_3),
    .din4(win_buf_win_4_3),
    .din5(win_buf_win_5_3),
    .din6(win_buf_win_6_3),
    .din7(win_buf_win_7_3),
    .din8(win_buf_win_8_3),
    .din9(win_buf_win_9_3),
    .din10(y_reg_734),
    .dout(tmp_12_fu_2063_p12)
);

SAD_MATCH_mux_104lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
SAD_MATCH_mux_104lbW_U6(
    .din0(win_buf_win_0_4),
    .din1(win_buf_win_1_4),
    .din2(win_buf_win_2_4),
    .din3(win_buf_win_3_4),
    .din4(win_buf_win_4_4),
    .din5(win_buf_win_5_4),
    .din6(win_buf_win_6_4),
    .din7(win_buf_win_7_4),
    .din8(win_buf_win_8_4),
    .din9(win_buf_win_9_4),
    .din10(y_reg_734),
    .dout(tmp_13_fu_2093_p12)
);

SAD_MATCH_mux_104lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
SAD_MATCH_mux_104lbW_U7(
    .din0(win_buf_win_0_5),
    .din1(win_buf_win_1_5),
    .din2(win_buf_win_2_5),
    .din3(win_buf_win_3_5),
    .din4(win_buf_win_4_5),
    .din5(win_buf_win_5_5),
    .din6(win_buf_win_6_5),
    .din7(win_buf_win_7_5),
    .din8(win_buf_win_8_5),
    .din9(win_buf_win_9_5),
    .din10(y_reg_734),
    .dout(tmp_14_fu_2123_p12)
);

SAD_MATCH_mux_104lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
SAD_MATCH_mux_104lbW_U8(
    .din0(win_buf_win_0_6),
    .din1(win_buf_win_1_6),
    .din2(win_buf_win_2_6),
    .din3(win_buf_win_3_6),
    .din4(win_buf_win_4_6),
    .din5(win_buf_win_5_6),
    .din6(win_buf_win_6_6),
    .din7(win_buf_win_7_6),
    .din8(win_buf_win_8_6),
    .din9(win_buf_win_9_6),
    .din10(y_reg_734),
    .dout(tmp_15_fu_2153_p12)
);

SAD_MATCH_mux_104lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
SAD_MATCH_mux_104lbW_U9(
    .din0(win_buf_win_0_7),
    .din1(win_buf_win_1_7),
    .din2(win_buf_win_2_7),
    .din3(win_buf_win_3_7),
    .din4(win_buf_win_4_7),
    .din5(win_buf_win_5_7),
    .din6(win_buf_win_6_7),
    .din7(win_buf_win_7_7),
    .din8(win_buf_win_8_7),
    .din9(win_buf_win_9_7),
    .din10(y_reg_734),
    .dout(tmp_16_fu_2183_p12)
);

SAD_MATCH_mux_104lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
SAD_MATCH_mux_104lbW_U10(
    .din0(win_buf_win_0_8),
    .din1(win_buf_win_1_8),
    .din2(win_buf_win_2_8),
    .din3(win_buf_win_3_8),
    .din4(win_buf_win_4_8),
    .din5(win_buf_win_5_8),
    .din6(win_buf_win_6_8),
    .din7(win_buf_win_7_8),
    .din8(win_buf_win_8_8),
    .din9(win_buf_win_9_8),
    .din10(y_reg_734),
    .dout(tmp_17_fu_2213_p12)
);

SAD_MATCH_mux_104lbW #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
SAD_MATCH_mux_104lbW_U11(
    .din0(win_buf_win_0_9),
    .din1(win_buf_win_1_9),
    .din2(win_buf_win_2_9),
    .din3(win_buf_win_3_9),
    .din4(win_buf_win_4_9),
    .din5(win_buf_win_5_9),
    .din6(win_buf_win_6_9),
    .din7(win_buf_win_7_9),
    .din8(win_buf_win_8_9),
    .din9(win_buf_win_9_9),
    .din10(y_reg_734),
    .dout(tmp_18_fu_2243_p12)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_data_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_data_0_ack_out) & (1'b1 == INPUT_data_0_vld_out))) begin
            INPUT_data_0_sel_rd <= ~INPUT_data_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_data_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == INPUT_data_0_ack_in) & (1'b1 == INPUT_data_0_vld_in))) begin
            INPUT_data_0_sel_wr <= ~INPUT_data_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_data_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == INPUT_data_0_state) & (1'b0 == INPUT_data_0_vld_in)) | ((2'd3 == INPUT_data_0_state) & (1'b0 == INPUT_data_0_vld_in) & (1'b1 == INPUT_data_0_ack_out)))) begin
            INPUT_data_0_state <= 2'd2;
        end else if ((((2'd1 == INPUT_data_0_state) & (1'b0 == INPUT_data_0_ack_out)) | ((2'd3 == INPUT_data_0_state) & (1'b0 == INPUT_data_0_ack_out) & (1'b1 == INPUT_data_0_vld_in)))) begin
            INPUT_data_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_data_0_vld_in) & (1'b1 == INPUT_data_0_ack_out)) & ~((1'b0 == INPUT_data_0_ack_out) & (1'b1 == INPUT_data_0_vld_in)) & (2'd3 == INPUT_data_0_state)) | ((2'd1 == INPUT_data_0_state) & (1'b1 == INPUT_data_0_ack_out)) | ((2'd2 == INPUT_data_0_state) & (1'b1 == INPUT_data_0_vld_in)))) begin
            INPUT_data_0_state <= 2'd3;
        end else begin
            INPUT_data_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        INPUT_last_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == INPUT_last_V_0_state) & (1'b0 == INPUT_last_V_0_vld_in)) | ((2'd3 == INPUT_last_V_0_state) & (1'b0 == INPUT_last_V_0_vld_in) & (1'b1 == INPUT_last_V_0_ack_out)))) begin
            INPUT_last_V_0_state <= 2'd2;
        end else if ((((2'd1 == INPUT_last_V_0_state) & (1'b0 == INPUT_last_V_0_ack_out)) | ((2'd3 == INPUT_last_V_0_state) & (1'b0 == INPUT_last_V_0_ack_out) & (1'b1 == INPUT_last_V_0_vld_in)))) begin
            INPUT_last_V_0_state <= 2'd1;
        end else if (((~((1'b0 == INPUT_last_V_0_vld_in) & (1'b1 == INPUT_last_V_0_ack_out)) & ~((1'b0 == INPUT_last_V_0_ack_out) & (1'b1 == INPUT_last_V_0_vld_in)) & (2'd3 == INPUT_last_V_0_state)) | ((2'd1 == INPUT_last_V_0_state) & (1'b1 == INPUT_last_V_0_ack_out)) | ((2'd2 == INPUT_last_V_0_state) & (1'b1 == INPUT_last_V_0_vld_in)))) begin
            INPUT_last_V_0_state <= 2'd3;
        end else begin
            INPUT_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_data_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_data_1_ack_out) & (1'b1 == OUTPUT_data_1_vld_out))) begin
            OUTPUT_data_1_sel_rd <= ~OUTPUT_data_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_data_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_data_1_ack_in) & (1'b1 == OUTPUT_data_1_vld_in))) begin
            OUTPUT_data_1_sel_wr <= ~OUTPUT_data_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_data_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUTPUT_data_1_state) & (1'b0 == OUTPUT_data_1_vld_in)) | ((2'd3 == OUTPUT_data_1_state) & (1'b0 == OUTPUT_data_1_vld_in) & (1'b1 == OUTPUT_data_1_ack_out)))) begin
            OUTPUT_data_1_state <= 2'd2;
        end else if ((((2'd1 == OUTPUT_data_1_state) & (1'b0 == OUTPUT_data_1_ack_out)) | ((2'd3 == OUTPUT_data_1_state) & (1'b0 == OUTPUT_data_1_ack_out) & (1'b1 == OUTPUT_data_1_vld_in)))) begin
            OUTPUT_data_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_data_1_vld_in) & (1'b1 == OUTPUT_data_1_ack_out)) & ~((1'b0 == OUTPUT_data_1_ack_out) & (1'b1 == OUTPUT_data_1_vld_in)) & (2'd3 == OUTPUT_data_1_state)) | ((2'd1 == OUTPUT_data_1_state) & (1'b1 == OUTPUT_data_1_ack_out)) | ((2'd2 == OUTPUT_data_1_state) & (1'b1 == OUTPUT_data_1_vld_in)))) begin
            OUTPUT_data_1_state <= 2'd3;
        end else begin
            OUTPUT_data_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_last_V_1_ack_out) & (1'b1 == OUTPUT_last_V_1_vld_out))) begin
            OUTPUT_last_V_1_sel_rd <= ~OUTPUT_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == OUTPUT_last_V_1_ack_in) & (1'b1 == OUTPUT_last_V_1_vld_in))) begin
            OUTPUT_last_V_1_sel_wr <= ~OUTPUT_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        OUTPUT_last_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == OUTPUT_last_V_1_state) & (1'b0 == OUTPUT_last_V_1_vld_in)) | ((2'd3 == OUTPUT_last_V_1_state) & (1'b0 == OUTPUT_last_V_1_vld_in) & (1'b1 == OUTPUT_last_V_1_ack_out)))) begin
            OUTPUT_last_V_1_state <= 2'd2;
        end else if ((((2'd1 == OUTPUT_last_V_1_state) & (1'b0 == OUTPUT_last_V_1_ack_out)) | ((2'd3 == OUTPUT_last_V_1_state) & (1'b0 == OUTPUT_last_V_1_ack_out) & (1'b1 == OUTPUT_last_V_1_vld_in)))) begin
            OUTPUT_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == OUTPUT_last_V_1_vld_in) & (1'b1 == OUTPUT_last_V_1_ack_out)) & ~((1'b0 == OUTPUT_last_V_1_ack_out) & (1'b1 == OUTPUT_last_V_1_vld_in)) & (2'd3 == OUTPUT_last_V_1_state)) | ((2'd1 == OUTPUT_last_V_1_state) & (1'b1 == OUTPUT_last_V_1_ack_out)) | ((2'd2 == OUTPUT_last_V_1_state) & (1'b1 == OUTPUT_last_V_1_vld_in)))) begin
            OUTPUT_last_V_1_state <= 2'd3;
        end else begin
            OUTPUT_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state6))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state9))) begin
            ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state9);
        end else if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_2588 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        j_reg_757 <= j_1_reg_2592;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        j_reg_757 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (1'b1 == OUTPUT_data_1_ack_in))) begin
        k_reg_469 <= p_s_reg_2597;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        k_reg_469 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        l_reg_722 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (exitcond3_reg_2545 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        l_reg_722 <= l_1_reg_2549;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_1271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        m_reg_481 <= m_1_fu_1277_p2;
    end else if (((1'b1 == INPUT_data_0_vld_out) & (1'b1 == ap_CS_fsm_state3))) begin
        m_reg_481 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (1'b1 == OUTPUT_data_1_ack_in))) begin
        p_012_rec_reg_457 <= i_reg_2419;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_012_rec_reg_457 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(ap_phi_mux_j_phi_fu_761_p4 == 4'd0) & ~(ap_phi_mux_j_phi_fu_761_p4 == 4'd1) & ~(ap_phi_mux_j_phi_fu_761_p4 == 4'd2) & ~(ap_phi_mux_j_phi_fu_761_p4 == 4'd3) & ~(ap_phi_mux_j_phi_fu_761_p4 == 4'd4) & ~(ap_phi_mux_j_phi_fu_761_p4 == 4'd5) & ~(ap_phi_mux_j_phi_fu_761_p4 == 4'd6) & ~(ap_phi_mux_j_phi_fu_761_p4 == 4'd7) & (exitcond_fu_2373_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        row_buf_buf_load_1_p_reg_769 <= row_buf_buf_9_load_reg_2583;
    end else if (((j_reg_757 == 4'd7) & (exitcond_reg_2588 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        row_buf_buf_load_1_p_reg_769 <= row_buf_buf_8_q0;
    end else if (((j_reg_757 == 4'd6) & (exitcond_reg_2588 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        row_buf_buf_load_1_p_reg_769 <= row_buf_buf_7_q0;
    end else if (((j_reg_757 == 4'd5) & (exitcond_reg_2588 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        row_buf_buf_load_1_p_reg_769 <= row_buf_buf_6_q0;
    end else if (((j_reg_757 == 4'd4) & (exitcond_reg_2588 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        row_buf_buf_load_1_p_reg_769 <= row_buf_buf_5_q0;
    end else if (((j_reg_757 == 4'd3) & (exitcond_reg_2588 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        row_buf_buf_load_1_p_reg_769 <= row_buf_buf_4_q0;
    end else if (((j_reg_757 == 4'd2) & (exitcond_reg_2588 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        row_buf_buf_load_1_p_reg_769 <= row_buf_buf_3_q0;
    end else if (((j_reg_757 == 4'd1) & (exitcond_reg_2588 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        row_buf_buf_load_1_p_reg_769 <= row_buf_buf_2_q0;
    end else if (((j_reg_757 == 4'd0) & (exitcond_reg_2588 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        row_buf_buf_load_1_p_reg_769 <= row_buf_buf_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        sad_reg_745 <= 15'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond5_reg_2554 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        sad_reg_745 <= sad_2_9_fu_2361_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        y_reg_734 <= 4'd0;
    end else if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond5_fu_1921_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        y_reg_734 <= y_1_fu_1927_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_data_0_load_A)) begin
        INPUT_data_0_payload_A <= INPUT_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == INPUT_data_0_load_B)) begin
        INPUT_data_0_payload_B <= INPUT_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_data_1_load_A)) begin
        OUTPUT_data_1_payload_A <= tmp_7_fu_2405_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_data_1_load_B)) begin
        OUTPUT_data_1_payload_B <= tmp_7_fu_2405_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_last_V_1_load_A)) begin
        OUTPUT_last_V_1_payload_A <= tmp_s_fu_2409_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == OUTPUT_last_V_1_load_B)) begin
        OUTPUT_last_V_1_payload_B <= tmp_s_fu_2409_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond3_reg_2545 <= exitcond3_fu_1823_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        exitcond5_reg_2554 <= exitcond5_fu_1921_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        exitcond_reg_2588 <= exitcond_fu_2373_p2;
        j_1_reg_2592 <= j_1_fu_2379_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == OUTPUT_last_V_1_ack_in) | (1'b0 == OUTPUT_data_1_ack_in)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_2419 <= i_fu_1255_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        l_1_reg_2549 <= l_1_fu_1829_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'b1 == OUTPUT_data_1_ack_in))) begin
        p_s_reg_2597 <= p_s_fu_2397_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        row_buf_buf_0_addr_reg_2500 <= tmp_reg_2424;
        row_buf_buf_1_addr_reg_2505 <= tmp_reg_2424;
        row_buf_buf_2_addr_reg_2510 <= tmp_reg_2424;
        row_buf_buf_3_addr_reg_2515 <= tmp_reg_2424;
        row_buf_buf_4_addr_reg_2520 <= tmp_reg_2424;
        row_buf_buf_5_addr_reg_2525 <= tmp_reg_2424;
        row_buf_buf_6_addr_reg_2530 <= tmp_reg_2424;
        row_buf_buf_7_addr_reg_2535 <= tmp_reg_2424;
        row_buf_buf_8_addr_reg_2540 <= tmp_reg_2424;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == INPUT_data_0_vld_out) & (1'b1 == ap_CS_fsm_state3))) begin
        row_buf_buf_9_addr_reg_2437 <= tmp_fu_1266_p1;
        tmp_reg_2424 <= tmp_fu_1266_p1;
        win_buf_win_0_9_load_reg_2442 <= win_buf_win_0_9;
        win_buf_win_1_9_load_reg_2447 <= win_buf_win_1_9;
        win_buf_win_2_9_load_reg_2452 <= win_buf_win_2_9;
        win_buf_win_3_9_load_reg_2457 <= win_buf_win_3_9;
        win_buf_win_4_9_load_reg_2462 <= win_buf_win_4_9;
        win_buf_win_5_9_load_reg_2467 <= win_buf_win_5_9;
        win_buf_win_6_9_load_reg_2472 <= win_buf_win_6_9;
        win_buf_win_7_9_load_reg_2477 <= win_buf_win_7_9;
        win_buf_win_8_9_load_reg_2482 <= win_buf_win_8_9;
        win_buf_win_9_9_load_reg_2487 <= win_buf_win_9_9;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        row_buf_buf_9_load_reg_2583 <= row_buf_buf_9_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (exitcond5_fu_1921_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        tmp5_reg_2563 <= tmp5_fu_2303_p2;
        tmp9_reg_2568 <= tmp9_fu_2339_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_8_reg_2578 <= tmp_8_fu_2367_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_m_phi_fu_485_p4 == 4'd0) & (exitcond2_fu_1271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        win_buf_win_0_0 <= ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18;
        win_buf_win_1_0 <= ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18;
        win_buf_win_2_0 <= ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18;
        win_buf_win_3_0 <= ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18;
        win_buf_win_4_0 <= ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18;
        win_buf_win_5_0 <= ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18;
        win_buf_win_6_0 <= ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18;
        win_buf_win_7_0 <= ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18;
        win_buf_win_8_0 <= ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18;
        win_buf_win_9_0 <= ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_m_phi_fu_485_p4 == 4'd1) & (exitcond2_fu_1271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        win_buf_win_0_1 <= ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18;
        win_buf_win_1_1 <= ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18;
        win_buf_win_2_1 <= ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18;
        win_buf_win_3_1 <= ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18;
        win_buf_win_4_1 <= ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18;
        win_buf_win_5_1 <= ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18;
        win_buf_win_6_1 <= ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18;
        win_buf_win_7_1 <= ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18;
        win_buf_win_8_1 <= ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18;
        win_buf_win_9_1 <= ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_m_phi_fu_485_p4 == 4'd2) & (exitcond2_fu_1271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        win_buf_win_0_2 <= ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18;
        win_buf_win_1_2 <= ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18;
        win_buf_win_2_2 <= ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18;
        win_buf_win_3_2 <= ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18;
        win_buf_win_4_2 <= ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18;
        win_buf_win_5_2 <= ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18;
        win_buf_win_6_2 <= ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18;
        win_buf_win_7_2 <= ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18;
        win_buf_win_8_2 <= ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18;
        win_buf_win_9_2 <= ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_m_phi_fu_485_p4 == 4'd3) & (exitcond2_fu_1271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        win_buf_win_0_3 <= ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18;
        win_buf_win_1_3 <= ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18;
        win_buf_win_2_3 <= ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18;
        win_buf_win_3_3 <= ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18;
        win_buf_win_4_3 <= ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18;
        win_buf_win_5_3 <= ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18;
        win_buf_win_6_3 <= ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18;
        win_buf_win_7_3 <= ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18;
        win_buf_win_8_3 <= ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18;
        win_buf_win_9_3 <= ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_m_phi_fu_485_p4 == 4'd4) & (exitcond2_fu_1271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        win_buf_win_0_4 <= ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18;
        win_buf_win_1_4 <= ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18;
        win_buf_win_2_4 <= ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18;
        win_buf_win_3_4 <= ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18;
        win_buf_win_4_4 <= ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18;
        win_buf_win_5_4 <= ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18;
        win_buf_win_6_4 <= ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18;
        win_buf_win_7_4 <= ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18;
        win_buf_win_8_4 <= ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18;
        win_buf_win_9_4 <= ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_m_phi_fu_485_p4 == 4'd5) & (exitcond2_fu_1271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        win_buf_win_0_5 <= ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18;
        win_buf_win_1_5 <= ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18;
        win_buf_win_2_5 <= ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18;
        win_buf_win_3_5 <= ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18;
        win_buf_win_4_5 <= ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18;
        win_buf_win_5_5 <= ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18;
        win_buf_win_6_5 <= ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18;
        win_buf_win_7_5 <= ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18;
        win_buf_win_8_5 <= ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18;
        win_buf_win_9_5 <= ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_m_phi_fu_485_p4 == 4'd6) & (exitcond2_fu_1271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        win_buf_win_0_6 <= ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18;
        win_buf_win_1_6 <= ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18;
        win_buf_win_2_6 <= ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18;
        win_buf_win_3_6 <= ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18;
        win_buf_win_4_6 <= ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18;
        win_buf_win_5_6 <= ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18;
        win_buf_win_6_6 <= ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18;
        win_buf_win_7_6 <= ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18;
        win_buf_win_8_6 <= ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18;
        win_buf_win_9_6 <= ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_phi_mux_m_phi_fu_485_p4 == 4'd7) & (exitcond2_fu_1271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        win_buf_win_0_7 <= ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18;
        win_buf_win_1_7 <= ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18;
        win_buf_win_2_7 <= ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18;
        win_buf_win_3_7 <= ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18;
        win_buf_win_4_7 <= ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18;
        win_buf_win_5_7 <= ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18;
        win_buf_win_6_7 <= ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18;
        win_buf_win_7_7 <= ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18;
        win_buf_win_8_7 <= ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18;
        win_buf_win_9_7 <= ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18;
    end
end

always @ (posedge ap_clk) begin
    if ((~(ap_phi_mux_m_phi_fu_485_p4 == 4'd7) & ~(ap_phi_mux_m_phi_fu_485_p4 == 4'd6) & ~(ap_phi_mux_m_phi_fu_485_p4 == 4'd5) & ~(ap_phi_mux_m_phi_fu_485_p4 == 4'd4) & ~(ap_phi_mux_m_phi_fu_485_p4 == 4'd3) & ~(ap_phi_mux_m_phi_fu_485_p4 == 4'd2) & ~(ap_phi_mux_m_phi_fu_485_p4 == 4'd1) & ~(ap_phi_mux_m_phi_fu_485_p4 == 4'd0) & (exitcond2_fu_1271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        win_buf_win_0_8 <= ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18;
        win_buf_win_1_8 <= ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18;
        win_buf_win_2_8 <= ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18;
        win_buf_win_3_8 <= ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18;
        win_buf_win_4_8 <= ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18;
        win_buf_win_5_8 <= ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18;
        win_buf_win_6_8 <= ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18;
        win_buf_win_7_8 <= ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18;
        win_buf_win_8_8 <= ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18;
        win_buf_win_9_8 <= ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (l_reg_722 == 4'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        win_buf_win_0_9 <= tmp_2_fu_1835_p12;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (l_reg_722 == 4'd1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        win_buf_win_1_9 <= tmp_2_fu_1835_p12;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (l_reg_722 == 4'd2) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        win_buf_win_2_9 <= tmp_2_fu_1835_p12;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (l_reg_722 == 4'd3) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        win_buf_win_3_9 <= tmp_2_fu_1835_p12;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (l_reg_722 == 4'd4) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        win_buf_win_4_9 <= tmp_2_fu_1835_p12;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (l_reg_722 == 4'd5) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        win_buf_win_5_9 <= tmp_2_fu_1835_p12;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (l_reg_722 == 4'd6) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        win_buf_win_6_9 <= tmp_2_fu_1835_p12;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (l_reg_722 == 4'd7) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        win_buf_win_7_9 <= tmp_2_fu_1835_p12;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (l_reg_722 == 4'd8) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        win_buf_win_8_9 <= tmp_2_fu_1835_p12;
    end
end

always @ (posedge ap_clk) begin
    if ((~(l_reg_722 == 4'd8) & ~(l_reg_722 == 4'd7) & ~(l_reg_722 == 4'd6) & ~(l_reg_722 == 4'd5) & ~(l_reg_722 == 4'd4) & ~(l_reg_722 == 4'd3) & ~(l_reg_722 == 4'd2) & ~(l_reg_722 == 4'd1) & ~(l_reg_722 == 4'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        win_buf_win_9_9 <= tmp_2_fu_1835_p12;
    end
end

always @ (*) begin
    if (((1'b1 == INPUT_data_0_vld_out) & (1'b1 == ap_CS_fsm_state3))) begin
        INPUT_data_0_ack_out = 1'b1;
    end else begin
        INPUT_data_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == INPUT_data_0_sel)) begin
        INPUT_data_0_data_out = INPUT_data_0_payload_B;
    end else begin
        INPUT_data_0_data_out = INPUT_data_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == INPUT_data_0_vld_out) & (1'b1 == ap_CS_fsm_state3))) begin
        INPUT_last_V_0_ack_out = 1'b1;
    end else begin
        INPUT_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        INPUT_r_TDATA_blk_n = INPUT_data_0_state[1'd0];
    end else begin
        INPUT_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_data_1_sel)) begin
        OUTPUT_data_1_data_out = OUTPUT_data_1_payload_B;
    end else begin
        OUTPUT_data_1_data_out = OUTPUT_data_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'b1 == OUTPUT_data_1_ack_in))) begin
        OUTPUT_data_1_vld_in = 1'b1;
    end else begin
        OUTPUT_data_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == OUTPUT_last_V_1_sel)) begin
        OUTPUT_last_V_1_data_out = OUTPUT_last_V_1_payload_B;
    end else begin
        OUTPUT_last_V_1_data_out = OUTPUT_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (1'b1 == OUTPUT_data_1_ack_in))) begin
        OUTPUT_last_V_1_vld_in = 1'b1;
    end else begin
        OUTPUT_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15))) begin
        OUTPUT_r_TDATA_blk_n = OUTPUT_data_1_state[1'd1];
    end else begin
        OUTPUT_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond3_fu_1823_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond5_fu_1921_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_last_V_1_ack_in) | (1'b0 == OUTPUT_data_1_ack_in)) & (exitcond4_fu_1249_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (exitcond3_reg_2545 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_l_phi_fu_726_p4 = l_1_reg_2549;
    end else begin
        ap_phi_mux_l_phi_fu_726_p4 = l_reg_722;
    end
end

always @ (*) begin
    if (((exitcond_reg_2588 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        if ((j_reg_757 == 4'd7)) begin
            ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18 = row_buf_buf_8_q0;
        end else if ((j_reg_757 == 4'd6)) begin
            ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18 = row_buf_buf_7_q0;
        end else if ((j_reg_757 == 4'd5)) begin
            ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18 = row_buf_buf_6_q0;
        end else if ((j_reg_757 == 4'd4)) begin
            ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18 = row_buf_buf_5_q0;
        end else if ((j_reg_757 == 4'd3)) begin
            ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18 = row_buf_buf_4_q0;
        end else if ((j_reg_757 == 4'd2)) begin
            ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18 = row_buf_buf_3_q0;
        end else if ((j_reg_757 == 4'd1)) begin
            ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18 = row_buf_buf_2_q0;
        end else if ((j_reg_757 == 4'd0)) begin
            ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18 = row_buf_buf_1_q0;
        end else begin
            ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18 = row_buf_buf_load_1_p_reg_769;
        end
    end else begin
        ap_phi_mux_row_buf_buf_load_1_p_phi_fu_772_p18 = row_buf_buf_load_1_p_reg_769;
    end
end

always @ (*) begin
    if (((exitcond2_fu_1271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        if ((1'b1 == ap_condition_775)) begin
            ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18 = win_buf_win_0_9_load_reg_2442;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd7)) begin
            ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18 = win_buf_win_0_8;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd6)) begin
            ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18 = win_buf_win_0_7;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd5)) begin
            ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18 = win_buf_win_0_6;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd4)) begin
            ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18 = win_buf_win_0_5;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd3)) begin
            ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18 = win_buf_win_0_4;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd2)) begin
            ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18 = win_buf_win_0_3;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd1)) begin
            ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18 = win_buf_win_0_2;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd0)) begin
            ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18 = win_buf_win_0_1;
        end else begin
            ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18 = 'bx;
        end
    end else begin
        ap_phi_mux_win_buf_win_load_0_p_phi_fu_495_p18 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond2_fu_1271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        if ((1'b1 == ap_condition_775)) begin
            ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18 = win_buf_win_2_9_load_reg_2452;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd7)) begin
            ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18 = win_buf_win_2_8;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd6)) begin
            ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18 = win_buf_win_2_7;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd5)) begin
            ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18 = win_buf_win_2_6;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd4)) begin
            ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18 = win_buf_win_2_5;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd3)) begin
            ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18 = win_buf_win_2_4;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd2)) begin
            ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18 = win_buf_win_2_3;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd1)) begin
            ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18 = win_buf_win_2_2;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd0)) begin
            ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18 = win_buf_win_2_1;
        end else begin
            ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18 = 'bx;
        end
    end else begin
        ap_phi_mux_win_buf_win_load_2_p_phi_fu_541_p18 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond2_fu_1271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        if ((1'b1 == ap_condition_775)) begin
            ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18 = win_buf_win_3_9_load_reg_2457;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd7)) begin
            ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18 = win_buf_win_3_8;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd6)) begin
            ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18 = win_buf_win_3_7;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd5)) begin
            ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18 = win_buf_win_3_6;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd4)) begin
            ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18 = win_buf_win_3_5;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd3)) begin
            ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18 = win_buf_win_3_4;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd2)) begin
            ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18 = win_buf_win_3_3;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd1)) begin
            ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18 = win_buf_win_3_2;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd0)) begin
            ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18 = win_buf_win_3_1;
        end else begin
            ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18 = 'bx;
        end
    end else begin
        ap_phi_mux_win_buf_win_load_3_p_phi_fu_564_p18 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond2_fu_1271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        if ((1'b1 == ap_condition_775)) begin
            ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18 = win_buf_win_4_9_load_reg_2462;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd7)) begin
            ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18 = win_buf_win_4_8;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd6)) begin
            ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18 = win_buf_win_4_7;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd5)) begin
            ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18 = win_buf_win_4_6;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd4)) begin
            ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18 = win_buf_win_4_5;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd3)) begin
            ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18 = win_buf_win_4_4;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd2)) begin
            ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18 = win_buf_win_4_3;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd1)) begin
            ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18 = win_buf_win_4_2;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd0)) begin
            ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18 = win_buf_win_4_1;
        end else begin
            ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18 = 'bx;
        end
    end else begin
        ap_phi_mux_win_buf_win_load_4_p_phi_fu_587_p18 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond2_fu_1271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        if ((1'b1 == ap_condition_775)) begin
            ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18 = win_buf_win_5_9_load_reg_2467;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd7)) begin
            ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18 = win_buf_win_5_8;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd6)) begin
            ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18 = win_buf_win_5_7;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd5)) begin
            ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18 = win_buf_win_5_6;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd4)) begin
            ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18 = win_buf_win_5_5;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd3)) begin
            ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18 = win_buf_win_5_4;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd2)) begin
            ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18 = win_buf_win_5_3;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd1)) begin
            ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18 = win_buf_win_5_2;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd0)) begin
            ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18 = win_buf_win_5_1;
        end else begin
            ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18 = 'bx;
        end
    end else begin
        ap_phi_mux_win_buf_win_load_5_p_phi_fu_610_p18 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond2_fu_1271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        if ((1'b1 == ap_condition_775)) begin
            ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18 = win_buf_win_6_9_load_reg_2472;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd7)) begin
            ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18 = win_buf_win_6_8;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd6)) begin
            ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18 = win_buf_win_6_7;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd5)) begin
            ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18 = win_buf_win_6_6;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd4)) begin
            ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18 = win_buf_win_6_5;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd3)) begin
            ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18 = win_buf_win_6_4;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd2)) begin
            ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18 = win_buf_win_6_3;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd1)) begin
            ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18 = win_buf_win_6_2;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd0)) begin
            ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18 = win_buf_win_6_1;
        end else begin
            ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18 = 'bx;
        end
    end else begin
        ap_phi_mux_win_buf_win_load_6_p_phi_fu_633_p18 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond2_fu_1271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        if ((1'b1 == ap_condition_775)) begin
            ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18 = win_buf_win_7_9_load_reg_2477;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd7)) begin
            ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18 = win_buf_win_7_8;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd6)) begin
            ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18 = win_buf_win_7_7;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd5)) begin
            ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18 = win_buf_win_7_6;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd4)) begin
            ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18 = win_buf_win_7_5;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd3)) begin
            ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18 = win_buf_win_7_4;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd2)) begin
            ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18 = win_buf_win_7_3;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd1)) begin
            ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18 = win_buf_win_7_2;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd0)) begin
            ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18 = win_buf_win_7_1;
        end else begin
            ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18 = 'bx;
        end
    end else begin
        ap_phi_mux_win_buf_win_load_7_p_phi_fu_656_p18 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond2_fu_1271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        if ((1'b1 == ap_condition_775)) begin
            ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18 = win_buf_win_8_9_load_reg_2482;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd7)) begin
            ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18 = win_buf_win_8_8;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd6)) begin
            ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18 = win_buf_win_8_7;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd5)) begin
            ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18 = win_buf_win_8_6;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd4)) begin
            ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18 = win_buf_win_8_5;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd3)) begin
            ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18 = win_buf_win_8_4;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd2)) begin
            ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18 = win_buf_win_8_3;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd1)) begin
            ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18 = win_buf_win_8_2;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd0)) begin
            ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18 = win_buf_win_8_1;
        end else begin
            ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18 = 'bx;
        end
    end else begin
        ap_phi_mux_win_buf_win_load_8_p_phi_fu_679_p18 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond2_fu_1271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        if ((1'b1 == ap_condition_775)) begin
            ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18 = win_buf_win_9_9_load_reg_2487;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd7)) begin
            ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18 = win_buf_win_9_8;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd6)) begin
            ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18 = win_buf_win_9_7;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd5)) begin
            ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18 = win_buf_win_9_6;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd4)) begin
            ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18 = win_buf_win_9_5;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd3)) begin
            ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18 = win_buf_win_9_4;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd2)) begin
            ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18 = win_buf_win_9_3;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd1)) begin
            ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18 = win_buf_win_9_2;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd0)) begin
            ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18 = win_buf_win_9_1;
        end else begin
            ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18 = 'bx;
        end
    end else begin
        ap_phi_mux_win_buf_win_load_9_p_phi_fu_702_p18 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond2_fu_1271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        if ((1'b1 == ap_condition_775)) begin
            ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18 = win_buf_win_1_9_load_reg_2447;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd7)) begin
            ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18 = win_buf_win_1_8;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd6)) begin
            ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18 = win_buf_win_1_7;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd5)) begin
            ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18 = win_buf_win_1_6;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd4)) begin
            ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18 = win_buf_win_1_5;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd3)) begin
            ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18 = win_buf_win_1_4;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd2)) begin
            ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18 = win_buf_win_1_3;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd1)) begin
            ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18 = win_buf_win_1_2;
        end else if ((ap_phi_mux_m_phi_fu_485_p4 == 4'd0)) begin
            ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18 = win_buf_win_1_1;
        end else begin
            ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18 = 'bx;
        end
    end else begin
        ap_phi_mux_win_buf_win_load_s_phi_fu_518_p18 = 'bx;
    end
end

always @ (*) begin
    if ((~((1'b0 == OUTPUT_last_V_1_ack_in) | (1'b0 == OUTPUT_data_1_ack_in)) & (exitcond4_fu_1249_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        row_buf_buf_0_ce0 = 1'b1;
    end else begin
        row_buf_buf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((j_reg_757 == 4'd0) & (exitcond_reg_2588 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        row_buf_buf_0_we0 = 1'b1;
    end else begin
        row_buf_buf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        row_buf_buf_1_ce0 = 1'b1;
    end else begin
        row_buf_buf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((j_reg_757 == 4'd1) & (exitcond_reg_2588 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        row_buf_buf_1_we0 = 1'b1;
    end else begin
        row_buf_buf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        row_buf_buf_2_ce0 = 1'b1;
    end else begin
        row_buf_buf_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((j_reg_757 == 4'd2) & (exitcond_reg_2588 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        row_buf_buf_2_we0 = 1'b1;
    end else begin
        row_buf_buf_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        row_buf_buf_3_ce0 = 1'b1;
    end else begin
        row_buf_buf_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((j_reg_757 == 4'd3) & (exitcond_reg_2588 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        row_buf_buf_3_we0 = 1'b1;
    end else begin
        row_buf_buf_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        row_buf_buf_4_ce0 = 1'b1;
    end else begin
        row_buf_buf_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((j_reg_757 == 4'd4) & (exitcond_reg_2588 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        row_buf_buf_4_we0 = 1'b1;
    end else begin
        row_buf_buf_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        row_buf_buf_5_ce0 = 1'b1;
    end else begin
        row_buf_buf_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((j_reg_757 == 4'd5) & (exitcond_reg_2588 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        row_buf_buf_5_we0 = 1'b1;
    end else begin
        row_buf_buf_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        row_buf_buf_6_ce0 = 1'b1;
    end else begin
        row_buf_buf_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((j_reg_757 == 4'd6) & (exitcond_reg_2588 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        row_buf_buf_6_we0 = 1'b1;
    end else begin
        row_buf_buf_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        row_buf_buf_7_ce0 = 1'b1;
    end else begin
        row_buf_buf_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((j_reg_757 == 4'd7) & (exitcond_reg_2588 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        row_buf_buf_7_we0 = 1'b1;
    end else begin
        row_buf_buf_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        row_buf_buf_8_ce0 = 1'b1;
    end else begin
        row_buf_buf_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(j_reg_757 == 4'd7) & ~(j_reg_757 == 4'd6) & ~(j_reg_757 == 4'd5) & ~(j_reg_757 == 4'd4) & ~(j_reg_757 == 4'd3) & ~(j_reg_757 == 4'd2) & ~(j_reg_757 == 4'd1) & ~(j_reg_757 == 4'd0) & (exitcond_reg_2588 == 1'd0) & (1'b1 == ap_CS_fsm_state14))) begin
        row_buf_buf_8_we0 = 1'b1;
    end else begin
        row_buf_buf_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        row_buf_buf_9_address0 = row_buf_buf_9_addr_reg_2437;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        row_buf_buf_9_address0 = tmp_fu_1266_p1;
    end else begin
        row_buf_buf_9_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b1 == INPUT_data_0_vld_out) & (1'b1 == ap_CS_fsm_state3)))) begin
        row_buf_buf_9_ce0 = 1'b1;
    end else begin
        row_buf_buf_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == INPUT_data_0_vld_out) & (1'b1 == ap_CS_fsm_state3))) begin
        row_buf_buf_9_we0 = 1'b1;
    end else begin
        row_buf_buf_9_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b0 == OUTPUT_last_V_1_ack_in) | (1'b0 == OUTPUT_data_1_ack_in)) & (exitcond4_fu_1249_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'b0 == OUTPUT_last_V_1_ack_in) | (1'b0 == OUTPUT_data_1_ack_in)) & (exitcond4_fu_1249_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == INPUT_data_0_vld_out) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond2_fu_1271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond3_fu_1823_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (exitcond3_fu_1823_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if (~((1'b0 == ap_block_pp2_stage0_subdone) & (exitcond5_fu_1921_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (exitcond5_fu_1921_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((exitcond_fu_2373_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (1'b1 == OUTPUT_data_1_ack_in))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (1'b1 == OUTPUT_data_1_ack_in))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign INPUT_data_0_ack_in = INPUT_data_0_state[1'd1];

assign INPUT_data_0_load_A = (~INPUT_data_0_sel_wr & INPUT_data_0_state_cmp_full);

assign INPUT_data_0_load_B = (INPUT_data_0_state_cmp_full & INPUT_data_0_sel_wr);

assign INPUT_data_0_sel = INPUT_data_0_sel_rd;

assign INPUT_data_0_state_cmp_full = ((INPUT_data_0_state != 2'd1) ? 1'b1 : 1'b0);

assign INPUT_data_0_vld_in = INPUT_r_TVALID;

assign INPUT_data_0_vld_out = INPUT_data_0_state[1'd0];

assign INPUT_last_V_0_vld_in = INPUT_r_TVALID;

assign INPUT_r_TREADY = INPUT_last_V_0_state[1'd1];

assign OUTPUT_data_1_ack_in = OUTPUT_data_1_state[1'd1];

assign OUTPUT_data_1_ack_out = OUTPUT_r_TREADY;

assign OUTPUT_data_1_load_A = (~OUTPUT_data_1_sel_wr & OUTPUT_data_1_state_cmp_full);

assign OUTPUT_data_1_load_B = (OUTPUT_data_1_state_cmp_full & OUTPUT_data_1_sel_wr);

assign OUTPUT_data_1_sel = OUTPUT_data_1_sel_rd;

assign OUTPUT_data_1_state_cmp_full = ((OUTPUT_data_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_data_1_vld_out = OUTPUT_data_1_state[1'd0];

assign OUTPUT_last_V_1_ack_in = OUTPUT_last_V_1_state[1'd1];

assign OUTPUT_last_V_1_ack_out = OUTPUT_r_TREADY;

assign OUTPUT_last_V_1_load_A = (~OUTPUT_last_V_1_sel_wr & OUTPUT_last_V_1_state_cmp_full);

assign OUTPUT_last_V_1_load_B = (OUTPUT_last_V_1_state_cmp_full & OUTPUT_last_V_1_sel_wr);

assign OUTPUT_last_V_1_sel = OUTPUT_last_V_1_sel_rd;

assign OUTPUT_last_V_1_state_cmp_full = ((OUTPUT_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign OUTPUT_last_V_1_vld_out = OUTPUT_last_V_1_state[1'd0];

assign OUTPUT_r_TDATA = OUTPUT_data_1_data_out;

assign OUTPUT_r_TLAST = OUTPUT_last_V_1_data_out;

assign OUTPUT_r_TVALID = OUTPUT_last_V_1_state[1'd0];

assign absl_1_cast_fu_2029_p1 = tmp_9_fu_2003_p12;

assign absl_2_cast_fu_2059_p1 = tmp_11_fu_2033_p12;

assign absl_3_cast_fu_2089_p1 = tmp_12_fu_2063_p12;

assign absl_4_cast_fu_2119_p1 = tmp_13_fu_2093_p12;

assign absl_5_cast_fu_2149_p1 = tmp_14_fu_2123_p12;

assign absl_6_cast_fu_2179_p1 = tmp_15_fu_2153_p12;

assign absl_7_cast_fu_2209_p1 = tmp_16_fu_2183_p12;

assign absl_8_cast_fu_2239_p1 = tmp_17_fu_2213_p12;

assign absl_9_cast_fu_2269_p1 = tmp_18_fu_2243_p12;

assign absl_cast_fu_1999_p1 = tmp_4_fu_1973_p12;

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2 = ((1'b0 == OUTPUT_last_V_1_ack_in) | (1'b0 == OUTPUT_data_1_ack_in));
end

assign ap_block_state6_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_775 = (~(ap_phi_mux_m_phi_fu_485_p4 == 4'd7) & ~(ap_phi_mux_m_phi_fu_485_p4 == 4'd6) & ~(ap_phi_mux_m_phi_fu_485_p4 == 4'd5) & ~(ap_phi_mux_m_phi_fu_485_p4 == 4'd4) & ~(ap_phi_mux_m_phi_fu_485_p4 == 4'd3) & ~(ap_phi_mux_m_phi_fu_485_p4 == 4'd2) & ~(ap_phi_mux_m_phi_fu_485_p4 == 4'd1) & ~(ap_phi_mux_m_phi_fu_485_p4 == 4'd0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_phi_mux_j_phi_fu_761_p4 = j_reg_757;

assign ap_phi_mux_m_phi_fu_485_p4 = m_reg_481;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond2_fu_1271_p2 = ((m_reg_481 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond3_fu_1823_p2 = ((ap_phi_mux_l_phi_fu_726_p4 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond4_fu_1249_p2 = ((p_012_rec_reg_457 == 16'd40000) ? 1'b1 : 1'b0);

assign exitcond5_fu_1921_p2 = ((y_reg_734 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_fu_2373_p2 = ((j_reg_757 == 4'd9) ? 1'b1 : 1'b0);

assign i_fu_1255_p2 = (p_012_rec_reg_457 + 16'd1);

assign j_1_fu_2379_p2 = (j_reg_757 + 4'd1);

assign k_1_fu_2385_p2 = ($signed(k_reg_469) + $signed(32'd1));

assign l_1_fu_1829_p2 = (ap_phi_mux_l_phi_fu_726_p4 + 4'd1);

assign m_1_fu_1277_p2 = (m_reg_481 + 4'd1);

assign p_cast_fu_2357_p1 = tmp_19_fu_2351_p2;

assign p_s_fu_2397_p3 = ((tmp_5_fu_2391_p2[0:0] === 1'b1) ? 32'd0 : k_1_fu_2385_p2);

assign sad_2_9_fu_2361_p2 = (sad_reg_745 + p_cast_fu_2357_p1);

assign tmp10_cast_fu_2315_p1 = tmp1_fu_2309_p2;

assign tmp11_cast_fu_2335_p1 = tmp3_fu_2329_p2;

assign tmp12_cast_fu_2325_p1 = tmp2_fu_2319_p2;

assign tmp1_fu_2309_p2 = (absl_5_cast_fu_2149_p1 + absl_6_cast_fu_2179_p1);

assign tmp2_fu_2319_p2 = (absl_8_cast_fu_2239_p1 + absl_9_cast_fu_2269_p1);

assign tmp3_fu_2329_p2 = (tmp12_cast_fu_2325_p1 + absl_7_cast_fu_2209_p1);

assign tmp5_cast_fu_2345_p1 = tmp5_reg_2563;

assign tmp5_fu_2303_p2 = (tmp7_cast_fu_2299_p1 + tmp6_cast_fu_2279_p1);

assign tmp6_cast_fu_2279_p1 = tmp6_fu_2273_p2;

assign tmp6_fu_2273_p2 = (absl_cast_fu_1999_p1 + absl_1_cast_fu_2029_p1);

assign tmp7_cast_fu_2299_p1 = tmp7_fu_2293_p2;

assign tmp7_fu_2293_p2 = (tmp8_cast_fu_2289_p1 + absl_2_cast_fu_2059_p1);

assign tmp8_cast_fu_2289_p1 = tmp8_fu_2283_p2;

assign tmp8_fu_2283_p2 = (absl_3_cast_fu_2089_p1 + absl_4_cast_fu_2119_p1);

assign tmp9_cast_fu_2348_p1 = tmp9_reg_2568;

assign tmp9_fu_2339_p2 = (tmp11_cast_fu_2335_p1 + tmp10_cast_fu_2315_p1);

assign tmp_19_fu_2351_p2 = (tmp9_cast_fu_2348_p1 + tmp5_cast_fu_2345_p1);

assign tmp_5_fu_2391_p2 = ((k_1_fu_2385_p2 == 32'd200) ? 1'b1 : 1'b0);

assign tmp_7_fu_2405_p1 = tmp_8_reg_2578;

assign tmp_8_fu_2367_p2 = ((sad_reg_745 == 15'd0) ? 1'b1 : 1'b0);

assign tmp_fu_1266_p1 = k_reg_469;

assign tmp_s_fu_2409_p2 = ((p_012_rec_reg_457 == 16'd39999) ? 1'b1 : 1'b0);

assign y_1_fu_1927_p2 = (y_reg_734 + 4'd1);

endmodule //SAD_MATCH
