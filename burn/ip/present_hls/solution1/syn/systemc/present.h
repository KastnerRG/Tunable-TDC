// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _present_HH_
#define _present_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "present_rounds.h"

namespace ap_rtl {

struct present : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<144> > stateIn_TDATA;
    sc_in< sc_logic > stateIn_TVALID;
    sc_out< sc_logic > stateIn_TREADY;
    sc_in< sc_lv<1> > stateIn_TLAST;
    sc_out< sc_lv<64> > stateOut_TDATA;
    sc_out< sc_logic > stateOut_TVALID;
    sc_in< sc_logic > stateOut_TREADY;
    sc_out< sc_lv<1> > stateOut_TLAST;


    // Module declarations
    present(sc_module_name name);
    SC_HAS_PROCESS(present);

    ~present();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    present_rounds* grp_present_rounds_fu_80;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<144> > stateIn_data_V_0_data_out;
    sc_signal< sc_logic > stateIn_data_V_0_vld_in;
    sc_signal< sc_logic > stateIn_data_V_0_vld_out;
    sc_signal< sc_logic > stateIn_data_V_0_ack_in;
    sc_signal< sc_logic > stateIn_data_V_0_ack_out;
    sc_signal< sc_lv<144> > stateIn_data_V_0_payload_A;
    sc_signal< sc_lv<144> > stateIn_data_V_0_payload_B;
    sc_signal< sc_logic > stateIn_data_V_0_sel_rd;
    sc_signal< sc_logic > stateIn_data_V_0_sel_wr;
    sc_signal< sc_logic > stateIn_data_V_0_sel;
    sc_signal< sc_logic > stateIn_data_V_0_load_A;
    sc_signal< sc_logic > stateIn_data_V_0_load_B;
    sc_signal< sc_lv<2> > stateIn_data_V_0_state;
    sc_signal< sc_logic > stateIn_data_V_0_state_cmp_full;
    sc_signal< sc_lv<1> > stateIn_last_V_0_data_out;
    sc_signal< sc_logic > stateIn_last_V_0_vld_in;
    sc_signal< sc_logic > stateIn_last_V_0_vld_out;
    sc_signal< sc_logic > stateIn_last_V_0_ack_in;
    sc_signal< sc_logic > stateIn_last_V_0_ack_out;
    sc_signal< sc_lv<1> > stateIn_last_V_0_payload_A;
    sc_signal< sc_lv<1> > stateIn_last_V_0_payload_B;
    sc_signal< sc_logic > stateIn_last_V_0_sel_rd;
    sc_signal< sc_logic > stateIn_last_V_0_sel_wr;
    sc_signal< sc_logic > stateIn_last_V_0_sel;
    sc_signal< sc_logic > stateIn_last_V_0_load_A;
    sc_signal< sc_logic > stateIn_last_V_0_load_B;
    sc_signal< sc_lv<2> > stateIn_last_V_0_state;
    sc_signal< sc_logic > stateIn_last_V_0_state_cmp_full;
    sc_signal< sc_lv<64> > stateOut_data_V_1_data_out;
    sc_signal< sc_logic > stateOut_data_V_1_vld_in;
    sc_signal< sc_logic > stateOut_data_V_1_vld_out;
    sc_signal< sc_logic > stateOut_data_V_1_ack_in;
    sc_signal< sc_logic > stateOut_data_V_1_ack_out;
    sc_signal< sc_lv<64> > stateOut_data_V_1_payload_A;
    sc_signal< sc_lv<64> > stateOut_data_V_1_payload_B;
    sc_signal< sc_logic > stateOut_data_V_1_sel_rd;
    sc_signal< sc_logic > stateOut_data_V_1_sel_wr;
    sc_signal< sc_logic > stateOut_data_V_1_sel;
    sc_signal< sc_logic > stateOut_data_V_1_load_A;
    sc_signal< sc_logic > stateOut_data_V_1_load_B;
    sc_signal< sc_lv<2> > stateOut_data_V_1_state;
    sc_signal< sc_logic > stateOut_data_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > stateOut_last_V_1_data_out;
    sc_signal< sc_logic > stateOut_last_V_1_vld_in;
    sc_signal< sc_logic > stateOut_last_V_1_vld_out;
    sc_signal< sc_logic > stateOut_last_V_1_ack_in;
    sc_signal< sc_logic > stateOut_last_V_1_ack_out;
    sc_signal< sc_lv<1> > stateOut_last_V_1_payload_A;
    sc_signal< sc_lv<1> > stateOut_last_V_1_payload_B;
    sc_signal< sc_logic > stateOut_last_V_1_sel_rd;
    sc_signal< sc_logic > stateOut_last_V_1_sel_wr;
    sc_signal< sc_logic > stateOut_last_V_1_sel;
    sc_signal< sc_logic > stateOut_last_V_1_load_A;
    sc_signal< sc_logic > stateOut_last_V_1_load_B;
    sc_signal< sc_lv<2> > stateOut_last_V_1_state;
    sc_signal< sc_logic > stateOut_last_V_1_state_cmp_full;
    sc_signal< sc_logic > stateIn_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > stateOut_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > stateIn_last_V_tmp_reg_121;
    sc_signal< sc_lv<64> > p_Result_s_reg_126;
    sc_signal< sc_lv<80> > tmp_82_fu_116_p1;
    sc_signal< sc_lv<80> > tmp_82_reg_131;
    sc_signal< sc_lv<64> > grp_present_rounds_fu_80_ap_return;
    sc_signal< sc_logic > grp_present_rounds_fu_80_ap_idle;
    sc_signal< sc_logic > grp_present_rounds_fu_80_ap_ready;
    sc_signal< sc_logic > grp_present_rounds_fu_80_ap_done;
    sc_signal< sc_logic > grp_present_rounds_fu_80_ap_start;
    sc_signal< sc_logic > grp_present_rounds_fu_80_ap_start_reg;
    sc_signal< bool > ap_block_state4;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_50;
    static const sc_lv<32> ap_const_lv32_8F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_grp_present_rounds_fu_80_ap_start();
    void thread_stateIn_TDATA_blk_n();
    void thread_stateIn_TREADY();
    void thread_stateIn_data_V_0_ack_in();
    void thread_stateIn_data_V_0_ack_out();
    void thread_stateIn_data_V_0_data_out();
    void thread_stateIn_data_V_0_load_A();
    void thread_stateIn_data_V_0_load_B();
    void thread_stateIn_data_V_0_sel();
    void thread_stateIn_data_V_0_state_cmp_full();
    void thread_stateIn_data_V_0_vld_in();
    void thread_stateIn_data_V_0_vld_out();
    void thread_stateIn_last_V_0_ack_in();
    void thread_stateIn_last_V_0_ack_out();
    void thread_stateIn_last_V_0_data_out();
    void thread_stateIn_last_V_0_load_A();
    void thread_stateIn_last_V_0_load_B();
    void thread_stateIn_last_V_0_sel();
    void thread_stateIn_last_V_0_state_cmp_full();
    void thread_stateIn_last_V_0_vld_in();
    void thread_stateIn_last_V_0_vld_out();
    void thread_stateOut_TDATA();
    void thread_stateOut_TDATA_blk_n();
    void thread_stateOut_TLAST();
    void thread_stateOut_TVALID();
    void thread_stateOut_data_V_1_ack_in();
    void thread_stateOut_data_V_1_ack_out();
    void thread_stateOut_data_V_1_data_out();
    void thread_stateOut_data_V_1_load_A();
    void thread_stateOut_data_V_1_load_B();
    void thread_stateOut_data_V_1_sel();
    void thread_stateOut_data_V_1_state_cmp_full();
    void thread_stateOut_data_V_1_vld_in();
    void thread_stateOut_data_V_1_vld_out();
    void thread_stateOut_last_V_1_ack_in();
    void thread_stateOut_last_V_1_ack_out();
    void thread_stateOut_last_V_1_data_out();
    void thread_stateOut_last_V_1_load_A();
    void thread_stateOut_last_V_1_load_B();
    void thread_stateOut_last_V_1_sel();
    void thread_stateOut_last_V_1_state_cmp_full();
    void thread_stateOut_last_V_1_vld_in();
    void thread_stateOut_last_V_1_vld_out();
    void thread_tmp_82_fu_116_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
