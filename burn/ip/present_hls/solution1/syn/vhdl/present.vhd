-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity present is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stateIn_TDATA : IN STD_LOGIC_VECTOR (143 downto 0);
    stateIn_TVALID : IN STD_LOGIC;
    stateIn_TREADY : OUT STD_LOGIC;
    stateIn_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stateOut_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    stateOut_TVALID : OUT STD_LOGIC;
    stateOut_TREADY : IN STD_LOGIC;
    stateOut_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of present is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "present,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.244000,HLS_SYN_LAT=65,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=0,HLS_SYN_FF=978,HLS_SYN_LUT=938,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal stateIn_data_V_0_data_out : STD_LOGIC_VECTOR (143 downto 0);
    signal stateIn_data_V_0_vld_in : STD_LOGIC;
    signal stateIn_data_V_0_vld_out : STD_LOGIC;
    signal stateIn_data_V_0_ack_in : STD_LOGIC;
    signal stateIn_data_V_0_ack_out : STD_LOGIC;
    signal stateIn_data_V_0_payload_A : STD_LOGIC_VECTOR (143 downto 0);
    signal stateIn_data_V_0_payload_B : STD_LOGIC_VECTOR (143 downto 0);
    signal stateIn_data_V_0_sel_rd : STD_LOGIC := '0';
    signal stateIn_data_V_0_sel_wr : STD_LOGIC := '0';
    signal stateIn_data_V_0_sel : STD_LOGIC;
    signal stateIn_data_V_0_load_A : STD_LOGIC;
    signal stateIn_data_V_0_load_B : STD_LOGIC;
    signal stateIn_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stateIn_data_V_0_state_cmp_full : STD_LOGIC;
    signal stateIn_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stateIn_last_V_0_vld_in : STD_LOGIC;
    signal stateIn_last_V_0_vld_out : STD_LOGIC;
    signal stateIn_last_V_0_ack_in : STD_LOGIC;
    signal stateIn_last_V_0_ack_out : STD_LOGIC;
    signal stateIn_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stateIn_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stateIn_last_V_0_sel_rd : STD_LOGIC := '0';
    signal stateIn_last_V_0_sel_wr : STD_LOGIC := '0';
    signal stateIn_last_V_0_sel : STD_LOGIC;
    signal stateIn_last_V_0_load_A : STD_LOGIC;
    signal stateIn_last_V_0_load_B : STD_LOGIC;
    signal stateIn_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stateIn_last_V_0_state_cmp_full : STD_LOGIC;
    signal stateOut_data_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal stateOut_data_V_1_vld_in : STD_LOGIC;
    signal stateOut_data_V_1_vld_out : STD_LOGIC;
    signal stateOut_data_V_1_ack_in : STD_LOGIC;
    signal stateOut_data_V_1_ack_out : STD_LOGIC;
    signal stateOut_data_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal stateOut_data_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal stateOut_data_V_1_sel_rd : STD_LOGIC := '0';
    signal stateOut_data_V_1_sel_wr : STD_LOGIC := '0';
    signal stateOut_data_V_1_sel : STD_LOGIC;
    signal stateOut_data_V_1_load_A : STD_LOGIC;
    signal stateOut_data_V_1_load_B : STD_LOGIC;
    signal stateOut_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stateOut_data_V_1_state_cmp_full : STD_LOGIC;
    signal stateOut_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stateOut_last_V_1_vld_in : STD_LOGIC;
    signal stateOut_last_V_1_vld_out : STD_LOGIC;
    signal stateOut_last_V_1_ack_in : STD_LOGIC;
    signal stateOut_last_V_1_ack_out : STD_LOGIC;
    signal stateOut_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stateOut_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stateOut_last_V_1_sel_rd : STD_LOGIC := '0';
    signal stateOut_last_V_1_sel_wr : STD_LOGIC := '0';
    signal stateOut_last_V_1_sel : STD_LOGIC;
    signal stateOut_last_V_1_load_A : STD_LOGIC;
    signal stateOut_last_V_1_load_B : STD_LOGIC;
    signal stateOut_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stateOut_last_V_1_state_cmp_full : STD_LOGIC;
    signal stateIn_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal stateOut_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal stateIn_last_V_tmp_reg_121 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_126 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_82_fu_116_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_82_reg_131 : STD_LOGIC_VECTOR (79 downto 0);
    signal grp_present_rounds_fu_80_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_present_rounds_fu_80_ap_idle : STD_LOGIC;
    signal grp_present_rounds_fu_80_ap_ready : STD_LOGIC;
    signal grp_present_rounds_fu_80_ap_done : STD_LOGIC;
    signal grp_present_rounds_fu_80_ap_start : STD_LOGIC;
    signal grp_present_rounds_fu_80_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state4 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component present_rounds IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        plain_V : IN STD_LOGIC_VECTOR (63 downto 0);
        key_V : IN STD_LOGIC_VECTOR (79 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_present_rounds_fu_80 : component present_rounds
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_present_rounds_fu_80_ap_start,
        ap_done => grp_present_rounds_fu_80_ap_done,
        ap_idle => grp_present_rounds_fu_80_ap_idle,
        ap_ready => grp_present_rounds_fu_80_ap_ready,
        plain_V => p_Result_s_reg_126,
        key_V => tmp_82_reg_131,
        ap_return => grp_present_rounds_fu_80_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_present_rounds_fu_80_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_present_rounds_fu_80_ap_start_reg <= ap_const_logic_0;
            else
                if (((stateIn_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_present_rounds_fu_80_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_present_rounds_fu_80_ap_ready = ap_const_logic_1)) then 
                    grp_present_rounds_fu_80_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    stateIn_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stateIn_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stateIn_data_V_0_ack_out = ap_const_logic_1) and (stateIn_data_V_0_vld_out = ap_const_logic_1))) then 
                                        stateIn_data_V_0_sel_rd <= not(stateIn_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stateIn_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stateIn_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stateIn_data_V_0_ack_in = ap_const_logic_1) and (stateIn_data_V_0_vld_in = ap_const_logic_1))) then 
                                        stateIn_data_V_0_sel_wr <= not(stateIn_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stateIn_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stateIn_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((stateIn_data_V_0_state = ap_const_lv2_2) and (stateIn_data_V_0_vld_in = ap_const_logic_0)) or ((stateIn_data_V_0_state = ap_const_lv2_3) and (stateIn_data_V_0_vld_in = ap_const_logic_0) and (stateIn_data_V_0_ack_out = ap_const_logic_1)))) then 
                    stateIn_data_V_0_state <= ap_const_lv2_2;
                elsif ((((stateIn_data_V_0_state = ap_const_lv2_1) and (stateIn_data_V_0_ack_out = ap_const_logic_0)) or ((stateIn_data_V_0_state = ap_const_lv2_3) and (stateIn_data_V_0_ack_out = ap_const_logic_0) and (stateIn_data_V_0_vld_in = ap_const_logic_1)))) then 
                    stateIn_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stateIn_data_V_0_vld_in = ap_const_logic_0) and (stateIn_data_V_0_ack_out = ap_const_logic_1))) and not(((stateIn_data_V_0_ack_out = ap_const_logic_0) and (stateIn_data_V_0_vld_in = ap_const_logic_1))) and (stateIn_data_V_0_state = ap_const_lv2_3)) or ((stateIn_data_V_0_state = ap_const_lv2_1) and (stateIn_data_V_0_ack_out = ap_const_logic_1)) or ((stateIn_data_V_0_state = ap_const_lv2_2) and (stateIn_data_V_0_vld_in = ap_const_logic_1)))) then 
                    stateIn_data_V_0_state <= ap_const_lv2_3;
                else 
                    stateIn_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stateIn_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stateIn_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stateIn_last_V_0_vld_out = ap_const_logic_1) and (stateIn_last_V_0_ack_out = ap_const_logic_1))) then 
                                        stateIn_last_V_0_sel_rd <= not(stateIn_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stateIn_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stateIn_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stateIn_last_V_0_ack_in = ap_const_logic_1) and (stateIn_last_V_0_vld_in = ap_const_logic_1))) then 
                                        stateIn_last_V_0_sel_wr <= not(stateIn_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stateIn_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stateIn_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((stateIn_last_V_0_state = ap_const_lv2_2) and (stateIn_last_V_0_vld_in = ap_const_logic_0)) or ((stateIn_last_V_0_state = ap_const_lv2_3) and (stateIn_last_V_0_vld_in = ap_const_logic_0) and (stateIn_last_V_0_ack_out = ap_const_logic_1)))) then 
                    stateIn_last_V_0_state <= ap_const_lv2_2;
                elsif ((((stateIn_last_V_0_state = ap_const_lv2_1) and (stateIn_last_V_0_ack_out = ap_const_logic_0)) or ((stateIn_last_V_0_state = ap_const_lv2_3) and (stateIn_last_V_0_ack_out = ap_const_logic_0) and (stateIn_last_V_0_vld_in = ap_const_logic_1)))) then 
                    stateIn_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stateIn_last_V_0_vld_in = ap_const_logic_0) and (stateIn_last_V_0_ack_out = ap_const_logic_1))) and not(((stateIn_last_V_0_ack_out = ap_const_logic_0) and (stateIn_last_V_0_vld_in = ap_const_logic_1))) and (stateIn_last_V_0_state = ap_const_lv2_3)) or ((stateIn_last_V_0_state = ap_const_lv2_1) and (stateIn_last_V_0_ack_out = ap_const_logic_1)) or ((stateIn_last_V_0_state = ap_const_lv2_2) and (stateIn_last_V_0_vld_in = ap_const_logic_1)))) then 
                    stateIn_last_V_0_state <= ap_const_lv2_3;
                else 
                    stateIn_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stateOut_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stateOut_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stateOut_data_V_1_ack_out = ap_const_logic_1) and (stateOut_data_V_1_vld_out = ap_const_logic_1))) then 
                                        stateOut_data_V_1_sel_rd <= not(stateOut_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stateOut_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stateOut_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stateOut_data_V_1_ack_in = ap_const_logic_1) and (stateOut_data_V_1_vld_in = ap_const_logic_1))) then 
                                        stateOut_data_V_1_sel_wr <= not(stateOut_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stateOut_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stateOut_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((stateOut_data_V_1_state = ap_const_lv2_2) and (stateOut_data_V_1_vld_in = ap_const_logic_0)) or ((stateOut_data_V_1_state = ap_const_lv2_3) and (stateOut_data_V_1_vld_in = ap_const_logic_0) and (stateOut_data_V_1_ack_out = ap_const_logic_1)))) then 
                    stateOut_data_V_1_state <= ap_const_lv2_2;
                elsif ((((stateOut_data_V_1_state = ap_const_lv2_1) and (stateOut_data_V_1_ack_out = ap_const_logic_0)) or ((stateOut_data_V_1_state = ap_const_lv2_3) and (stateOut_data_V_1_ack_out = ap_const_logic_0) and (stateOut_data_V_1_vld_in = ap_const_logic_1)))) then 
                    stateOut_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stateOut_data_V_1_vld_in = ap_const_logic_0) and (stateOut_data_V_1_ack_out = ap_const_logic_1))) and not(((stateOut_data_V_1_ack_out = ap_const_logic_0) and (stateOut_data_V_1_vld_in = ap_const_logic_1))) and (stateOut_data_V_1_state = ap_const_lv2_3)) or ((stateOut_data_V_1_state = ap_const_lv2_1) and (stateOut_data_V_1_ack_out = ap_const_logic_1)) or ((stateOut_data_V_1_state = ap_const_lv2_2) and (stateOut_data_V_1_vld_in = ap_const_logic_1)))) then 
                    stateOut_data_V_1_state <= ap_const_lv2_3;
                else 
                    stateOut_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stateOut_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stateOut_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stateOut_last_V_1_ack_out = ap_const_logic_1) and (stateOut_last_V_1_vld_out = ap_const_logic_1))) then 
                                        stateOut_last_V_1_sel_rd <= not(stateOut_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stateOut_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stateOut_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stateOut_last_V_1_ack_in = ap_const_logic_1) and (stateOut_last_V_1_vld_in = ap_const_logic_1))) then 
                                        stateOut_last_V_1_sel_wr <= not(stateOut_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stateOut_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stateOut_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((stateOut_last_V_1_state = ap_const_lv2_2) and (stateOut_last_V_1_vld_in = ap_const_logic_0)) or ((stateOut_last_V_1_state = ap_const_lv2_3) and (stateOut_last_V_1_vld_in = ap_const_logic_0) and (stateOut_last_V_1_ack_out = ap_const_logic_1)))) then 
                    stateOut_last_V_1_state <= ap_const_lv2_2;
                elsif ((((stateOut_last_V_1_state = ap_const_lv2_1) and (stateOut_last_V_1_ack_out = ap_const_logic_0)) or ((stateOut_last_V_1_state = ap_const_lv2_3) and (stateOut_last_V_1_ack_out = ap_const_logic_0) and (stateOut_last_V_1_vld_in = ap_const_logic_1)))) then 
                    stateOut_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stateOut_last_V_1_vld_in = ap_const_logic_0) and (stateOut_last_V_1_ack_out = ap_const_logic_1))) and not(((stateOut_last_V_1_ack_out = ap_const_logic_0) and (stateOut_last_V_1_vld_in = ap_const_logic_1))) and (stateOut_last_V_1_state = ap_const_lv2_3)) or ((stateOut_last_V_1_state = ap_const_lv2_1) and (stateOut_last_V_1_ack_out = ap_const_logic_1)) or ((stateOut_last_V_1_state = ap_const_lv2_2) and (stateOut_last_V_1_vld_in = ap_const_logic_1)))) then 
                    stateOut_last_V_1_state <= ap_const_lv2_3;
                else 
                    stateOut_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((stateIn_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                p_Result_s_reg_126 <= stateIn_data_V_0_data_out(143 downto 80);
                stateIn_last_V_tmp_reg_121 <= stateIn_last_V_0_data_out;
                tmp_82_reg_131 <= tmp_82_fu_116_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stateIn_data_V_0_load_A = ap_const_logic_1)) then
                stateIn_data_V_0_payload_A <= stateIn_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stateIn_data_V_0_load_B = ap_const_logic_1)) then
                stateIn_data_V_0_payload_B <= stateIn_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stateIn_last_V_0_load_A = ap_const_logic_1)) then
                stateIn_last_V_0_payload_A <= stateIn_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stateIn_last_V_0_load_B = ap_const_logic_1)) then
                stateIn_last_V_0_payload_B <= stateIn_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stateOut_data_V_1_load_A = ap_const_logic_1)) then
                stateOut_data_V_1_payload_A <= grp_present_rounds_fu_80_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stateOut_data_V_1_load_B = ap_const_logic_1)) then
                stateOut_data_V_1_payload_B <= grp_present_rounds_fu_80_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stateOut_last_V_1_load_A = ap_const_logic_1)) then
                stateOut_last_V_1_payload_A <= stateIn_last_V_tmp_reg_121;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stateOut_last_V_1_load_B = ap_const_logic_1)) then
                stateOut_last_V_1_payload_B <= stateIn_last_V_tmp_reg_121;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, stateIn_data_V_0_vld_out, stateOut_data_V_1_ack_in, stateOut_last_V_1_ack_in, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, grp_present_rounds_fu_80_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((stateIn_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((grp_present_rounds_fu_80_ap_done = ap_const_logic_0) or (stateOut_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((stateOut_last_V_1_ack_in = ap_const_logic_0) or (stateOut_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state4_assign_proc : process(stateOut_data_V_1_ack_in, stateOut_last_V_1_ack_in)
    begin
                ap_block_state4 <= ((stateOut_last_V_1_ack_in = ap_const_logic_0) or (stateOut_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(stateOut_data_V_1_ack_in, stateOut_last_V_1_ack_in, ap_CS_fsm_state4)
    begin
        if ((not(((stateOut_last_V_1_ack_in = ap_const_logic_0) or (stateOut_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(stateOut_data_V_1_ack_in, stateOut_last_V_1_ack_in, ap_CS_fsm_state4)
    begin
        if ((not(((stateOut_last_V_1_ack_in = ap_const_logic_0) or (stateOut_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_present_rounds_fu_80_ap_start <= grp_present_rounds_fu_80_ap_start_reg;

    stateIn_TDATA_blk_n_assign_proc : process(stateIn_data_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            stateIn_TDATA_blk_n <= stateIn_data_V_0_state(0);
        else 
            stateIn_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stateIn_TREADY <= stateIn_last_V_0_state(1);
    stateIn_data_V_0_ack_in <= stateIn_data_V_0_state(1);

    stateIn_data_V_0_ack_out_assign_proc : process(stateIn_data_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((stateIn_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            stateIn_data_V_0_ack_out <= ap_const_logic_1;
        else 
            stateIn_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stateIn_data_V_0_data_out_assign_proc : process(stateIn_data_V_0_payload_A, stateIn_data_V_0_payload_B, stateIn_data_V_0_sel)
    begin
        if ((stateIn_data_V_0_sel = ap_const_logic_1)) then 
            stateIn_data_V_0_data_out <= stateIn_data_V_0_payload_B;
        else 
            stateIn_data_V_0_data_out <= stateIn_data_V_0_payload_A;
        end if; 
    end process;

    stateIn_data_V_0_load_A <= (stateIn_data_V_0_state_cmp_full and not(stateIn_data_V_0_sel_wr));
    stateIn_data_V_0_load_B <= (stateIn_data_V_0_state_cmp_full and stateIn_data_V_0_sel_wr);
    stateIn_data_V_0_sel <= stateIn_data_V_0_sel_rd;
    stateIn_data_V_0_state_cmp_full <= '0' when (stateIn_data_V_0_state = ap_const_lv2_1) else '1';
    stateIn_data_V_0_vld_in <= stateIn_TVALID;
    stateIn_data_V_0_vld_out <= stateIn_data_V_0_state(0);
    stateIn_last_V_0_ack_in <= stateIn_last_V_0_state(1);

    stateIn_last_V_0_ack_out_assign_proc : process(stateIn_data_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((stateIn_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            stateIn_last_V_0_ack_out <= ap_const_logic_1;
        else 
            stateIn_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stateIn_last_V_0_data_out_assign_proc : process(stateIn_last_V_0_payload_A, stateIn_last_V_0_payload_B, stateIn_last_V_0_sel)
    begin
        if ((stateIn_last_V_0_sel = ap_const_logic_1)) then 
            stateIn_last_V_0_data_out <= stateIn_last_V_0_payload_B;
        else 
            stateIn_last_V_0_data_out <= stateIn_last_V_0_payload_A;
        end if; 
    end process;

    stateIn_last_V_0_load_A <= (stateIn_last_V_0_state_cmp_full and not(stateIn_last_V_0_sel_wr));
    stateIn_last_V_0_load_B <= (stateIn_last_V_0_state_cmp_full and stateIn_last_V_0_sel_wr);
    stateIn_last_V_0_sel <= stateIn_last_V_0_sel_rd;
    stateIn_last_V_0_state_cmp_full <= '0' when (stateIn_last_V_0_state = ap_const_lv2_1) else '1';
    stateIn_last_V_0_vld_in <= stateIn_TVALID;
    stateIn_last_V_0_vld_out <= stateIn_last_V_0_state(0);
    stateOut_TDATA <= stateOut_data_V_1_data_out;

    stateOut_TDATA_blk_n_assign_proc : process(stateOut_data_V_1_state, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            stateOut_TDATA_blk_n <= stateOut_data_V_1_state(1);
        else 
            stateOut_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stateOut_TLAST <= stateOut_last_V_1_data_out;
    stateOut_TVALID <= stateOut_last_V_1_state(0);
    stateOut_data_V_1_ack_in <= stateOut_data_V_1_state(1);
    stateOut_data_V_1_ack_out <= stateOut_TREADY;

    stateOut_data_V_1_data_out_assign_proc : process(stateOut_data_V_1_payload_A, stateOut_data_V_1_payload_B, stateOut_data_V_1_sel)
    begin
        if ((stateOut_data_V_1_sel = ap_const_logic_1)) then 
            stateOut_data_V_1_data_out <= stateOut_data_V_1_payload_B;
        else 
            stateOut_data_V_1_data_out <= stateOut_data_V_1_payload_A;
        end if; 
    end process;

    stateOut_data_V_1_load_A <= (stateOut_data_V_1_state_cmp_full and not(stateOut_data_V_1_sel_wr));
    stateOut_data_V_1_load_B <= (stateOut_data_V_1_state_cmp_full and stateOut_data_V_1_sel_wr);
    stateOut_data_V_1_sel <= stateOut_data_V_1_sel_rd;
    stateOut_data_V_1_state_cmp_full <= '0' when (stateOut_data_V_1_state = ap_const_lv2_1) else '1';

    stateOut_data_V_1_vld_in_assign_proc : process(stateOut_data_V_1_ack_in, ap_CS_fsm_state3, grp_present_rounds_fu_80_ap_done)
    begin
        if ((not(((grp_present_rounds_fu_80_ap_done = ap_const_logic_0) or (stateOut_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            stateOut_data_V_1_vld_in <= ap_const_logic_1;
        else 
            stateOut_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stateOut_data_V_1_vld_out <= stateOut_data_V_1_state(0);
    stateOut_last_V_1_ack_in <= stateOut_last_V_1_state(1);
    stateOut_last_V_1_ack_out <= stateOut_TREADY;

    stateOut_last_V_1_data_out_assign_proc : process(stateOut_last_V_1_payload_A, stateOut_last_V_1_payload_B, stateOut_last_V_1_sel)
    begin
        if ((stateOut_last_V_1_sel = ap_const_logic_1)) then 
            stateOut_last_V_1_data_out <= stateOut_last_V_1_payload_B;
        else 
            stateOut_last_V_1_data_out <= stateOut_last_V_1_payload_A;
        end if; 
    end process;

    stateOut_last_V_1_load_A <= (stateOut_last_V_1_state_cmp_full and not(stateOut_last_V_1_sel_wr));
    stateOut_last_V_1_load_B <= (stateOut_last_V_1_state_cmp_full and stateOut_last_V_1_sel_wr);
    stateOut_last_V_1_sel <= stateOut_last_V_1_sel_rd;
    stateOut_last_V_1_state_cmp_full <= '0' when (stateOut_last_V_1_state = ap_const_lv2_1) else '1';

    stateOut_last_V_1_vld_in_assign_proc : process(stateOut_data_V_1_ack_in, ap_CS_fsm_state3, grp_present_rounds_fu_80_ap_done)
    begin
        if ((not(((grp_present_rounds_fu_80_ap_done = ap_const_logic_0) or (stateOut_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            stateOut_last_V_1_vld_in <= ap_const_logic_1;
        else 
            stateOut_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stateOut_last_V_1_vld_out <= stateOut_last_V_1_state(0);
    tmp_82_fu_116_p1 <= stateIn_data_V_0_data_out(80 - 1 downto 0);
end behav;
