// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="present,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.244000,HLS_SYN_LAT=65,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=0,HLS_SYN_FF=978,HLS_SYN_LUT=938,HLS_VERSION=2018_2}" *)

module present (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stateIn_TDATA,
        stateIn_TVALID,
        stateIn_TREADY,
        stateIn_TLAST,
        stateOut_TDATA,
        stateOut_TVALID,
        stateOut_TREADY,
        stateOut_TLAST
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [143:0] stateIn_TDATA;
input   stateIn_TVALID;
output   stateIn_TREADY;
input  [0:0] stateIn_TLAST;
output  [63:0] stateOut_TDATA;
output   stateOut_TVALID;
input   stateOut_TREADY;
output  [0:0] stateOut_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [143:0] stateIn_data_V_0_data_out;
wire    stateIn_data_V_0_vld_in;
wire    stateIn_data_V_0_vld_out;
wire    stateIn_data_V_0_ack_in;
reg    stateIn_data_V_0_ack_out;
reg   [143:0] stateIn_data_V_0_payload_A;
reg   [143:0] stateIn_data_V_0_payload_B;
reg    stateIn_data_V_0_sel_rd;
reg    stateIn_data_V_0_sel_wr;
wire    stateIn_data_V_0_sel;
wire    stateIn_data_V_0_load_A;
wire    stateIn_data_V_0_load_B;
reg   [1:0] stateIn_data_V_0_state;
wire    stateIn_data_V_0_state_cmp_full;
reg   [0:0] stateIn_last_V_0_data_out;
wire    stateIn_last_V_0_vld_in;
wire    stateIn_last_V_0_vld_out;
wire    stateIn_last_V_0_ack_in;
reg    stateIn_last_V_0_ack_out;
reg   [0:0] stateIn_last_V_0_payload_A;
reg   [0:0] stateIn_last_V_0_payload_B;
reg    stateIn_last_V_0_sel_rd;
reg    stateIn_last_V_0_sel_wr;
wire    stateIn_last_V_0_sel;
wire    stateIn_last_V_0_load_A;
wire    stateIn_last_V_0_load_B;
reg   [1:0] stateIn_last_V_0_state;
wire    stateIn_last_V_0_state_cmp_full;
reg   [63:0] stateOut_data_V_1_data_out;
reg    stateOut_data_V_1_vld_in;
wire    stateOut_data_V_1_vld_out;
wire    stateOut_data_V_1_ack_in;
wire    stateOut_data_V_1_ack_out;
reg   [63:0] stateOut_data_V_1_payload_A;
reg   [63:0] stateOut_data_V_1_payload_B;
reg    stateOut_data_V_1_sel_rd;
reg    stateOut_data_V_1_sel_wr;
wire    stateOut_data_V_1_sel;
wire    stateOut_data_V_1_load_A;
wire    stateOut_data_V_1_load_B;
reg   [1:0] stateOut_data_V_1_state;
wire    stateOut_data_V_1_state_cmp_full;
reg   [0:0] stateOut_last_V_1_data_out;
reg    stateOut_last_V_1_vld_in;
wire    stateOut_last_V_1_vld_out;
wire    stateOut_last_V_1_ack_in;
wire    stateOut_last_V_1_ack_out;
reg   [0:0] stateOut_last_V_1_payload_A;
reg   [0:0] stateOut_last_V_1_payload_B;
reg    stateOut_last_V_1_sel_rd;
reg    stateOut_last_V_1_sel_wr;
wire    stateOut_last_V_1_sel;
wire    stateOut_last_V_1_load_A;
wire    stateOut_last_V_1_load_B;
reg   [1:0] stateOut_last_V_1_state;
wire    stateOut_last_V_1_state_cmp_full;
reg    stateIn_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    stateOut_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg   [0:0] stateIn_last_V_tmp_reg_121;
reg   [63:0] p_Result_s_reg_126;
wire   [79:0] tmp_82_fu_116_p1;
reg   [79:0] tmp_82_reg_131;
wire   [63:0] grp_present_rounds_fu_80_ap_return;
wire    grp_present_rounds_fu_80_ap_idle;
wire    grp_present_rounds_fu_80_ap_ready;
wire    grp_present_rounds_fu_80_ap_done;
wire    grp_present_rounds_fu_80_ap_start;
reg    grp_present_rounds_fu_80_ap_start_reg;
reg    ap_block_state4;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 stateIn_data_V_0_sel_rd = 1'b0;
#0 stateIn_data_V_0_sel_wr = 1'b0;
#0 stateIn_data_V_0_state = 2'd0;
#0 stateIn_last_V_0_sel_rd = 1'b0;
#0 stateIn_last_V_0_sel_wr = 1'b0;
#0 stateIn_last_V_0_state = 2'd0;
#0 stateOut_data_V_1_sel_rd = 1'b0;
#0 stateOut_data_V_1_sel_wr = 1'b0;
#0 stateOut_data_V_1_state = 2'd0;
#0 stateOut_last_V_1_sel_rd = 1'b0;
#0 stateOut_last_V_1_sel_wr = 1'b0;
#0 stateOut_last_V_1_state = 2'd0;
#0 grp_present_rounds_fu_80_ap_start_reg = 1'b0;
end

present_rounds grp_present_rounds_fu_80(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_present_rounds_fu_80_ap_start),
    .ap_done(grp_present_rounds_fu_80_ap_done),
    .ap_idle(grp_present_rounds_fu_80_ap_idle),
    .ap_ready(grp_present_rounds_fu_80_ap_ready),
    .plain_V(p_Result_s_reg_126),
    .key_V(tmp_82_reg_131),
    .ap_return(grp_present_rounds_fu_80_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_present_rounds_fu_80_ap_start_reg <= 1'b0;
    end else begin
        if (((stateIn_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_present_rounds_fu_80_ap_start_reg <= 1'b1;
        end else if ((grp_present_rounds_fu_80_ap_ready == 1'b1)) begin
            grp_present_rounds_fu_80_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stateIn_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stateIn_data_V_0_ack_out == 1'b1) & (stateIn_data_V_0_vld_out == 1'b1))) begin
            stateIn_data_V_0_sel_rd <= ~stateIn_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stateIn_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stateIn_data_V_0_ack_in == 1'b1) & (stateIn_data_V_0_vld_in == 1'b1))) begin
            stateIn_data_V_0_sel_wr <= ~stateIn_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stateIn_data_V_0_state <= 2'd0;
    end else begin
        if ((((stateIn_data_V_0_state == 2'd2) & (stateIn_data_V_0_vld_in == 1'b0)) | ((stateIn_data_V_0_state == 2'd3) & (stateIn_data_V_0_vld_in == 1'b0) & (stateIn_data_V_0_ack_out == 1'b1)))) begin
            stateIn_data_V_0_state <= 2'd2;
        end else if ((((stateIn_data_V_0_state == 2'd1) & (stateIn_data_V_0_ack_out == 1'b0)) | ((stateIn_data_V_0_state == 2'd3) & (stateIn_data_V_0_ack_out == 1'b0) & (stateIn_data_V_0_vld_in == 1'b1)))) begin
            stateIn_data_V_0_state <= 2'd1;
        end else if (((~((stateIn_data_V_0_vld_in == 1'b0) & (stateIn_data_V_0_ack_out == 1'b1)) & ~((stateIn_data_V_0_ack_out == 1'b0) & (stateIn_data_V_0_vld_in == 1'b1)) & (stateIn_data_V_0_state == 2'd3)) | ((stateIn_data_V_0_state == 2'd1) & (stateIn_data_V_0_ack_out == 1'b1)) | ((stateIn_data_V_0_state == 2'd2) & (stateIn_data_V_0_vld_in == 1'b1)))) begin
            stateIn_data_V_0_state <= 2'd3;
        end else begin
            stateIn_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stateIn_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stateIn_last_V_0_vld_out == 1'b1) & (stateIn_last_V_0_ack_out == 1'b1))) begin
            stateIn_last_V_0_sel_rd <= ~stateIn_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stateIn_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stateIn_last_V_0_ack_in == 1'b1) & (stateIn_last_V_0_vld_in == 1'b1))) begin
            stateIn_last_V_0_sel_wr <= ~stateIn_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stateIn_last_V_0_state <= 2'd0;
    end else begin
        if ((((stateIn_last_V_0_state == 2'd2) & (stateIn_last_V_0_vld_in == 1'b0)) | ((stateIn_last_V_0_state == 2'd3) & (stateIn_last_V_0_vld_in == 1'b0) & (stateIn_last_V_0_ack_out == 1'b1)))) begin
            stateIn_last_V_0_state <= 2'd2;
        end else if ((((stateIn_last_V_0_state == 2'd1) & (stateIn_last_V_0_ack_out == 1'b0)) | ((stateIn_last_V_0_state == 2'd3) & (stateIn_last_V_0_ack_out == 1'b0) & (stateIn_last_V_0_vld_in == 1'b1)))) begin
            stateIn_last_V_0_state <= 2'd1;
        end else if (((~((stateIn_last_V_0_vld_in == 1'b0) & (stateIn_last_V_0_ack_out == 1'b1)) & ~((stateIn_last_V_0_ack_out == 1'b0) & (stateIn_last_V_0_vld_in == 1'b1)) & (stateIn_last_V_0_state == 2'd3)) | ((stateIn_last_V_0_state == 2'd1) & (stateIn_last_V_0_ack_out == 1'b1)) | ((stateIn_last_V_0_state == 2'd2) & (stateIn_last_V_0_vld_in == 1'b1)))) begin
            stateIn_last_V_0_state <= 2'd3;
        end else begin
            stateIn_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stateOut_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stateOut_data_V_1_ack_out == 1'b1) & (stateOut_data_V_1_vld_out == 1'b1))) begin
            stateOut_data_V_1_sel_rd <= ~stateOut_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stateOut_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stateOut_data_V_1_ack_in == 1'b1) & (stateOut_data_V_1_vld_in == 1'b1))) begin
            stateOut_data_V_1_sel_wr <= ~stateOut_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stateOut_data_V_1_state <= 2'd0;
    end else begin
        if ((((stateOut_data_V_1_state == 2'd2) & (stateOut_data_V_1_vld_in == 1'b0)) | ((stateOut_data_V_1_state == 2'd3) & (stateOut_data_V_1_vld_in == 1'b0) & (stateOut_data_V_1_ack_out == 1'b1)))) begin
            stateOut_data_V_1_state <= 2'd2;
        end else if ((((stateOut_data_V_1_state == 2'd1) & (stateOut_data_V_1_ack_out == 1'b0)) | ((stateOut_data_V_1_state == 2'd3) & (stateOut_data_V_1_ack_out == 1'b0) & (stateOut_data_V_1_vld_in == 1'b1)))) begin
            stateOut_data_V_1_state <= 2'd1;
        end else if (((~((stateOut_data_V_1_vld_in == 1'b0) & (stateOut_data_V_1_ack_out == 1'b1)) & ~((stateOut_data_V_1_ack_out == 1'b0) & (stateOut_data_V_1_vld_in == 1'b1)) & (stateOut_data_V_1_state == 2'd3)) | ((stateOut_data_V_1_state == 2'd1) & (stateOut_data_V_1_ack_out == 1'b1)) | ((stateOut_data_V_1_state == 2'd2) & (stateOut_data_V_1_vld_in == 1'b1)))) begin
            stateOut_data_V_1_state <= 2'd3;
        end else begin
            stateOut_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stateOut_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stateOut_last_V_1_ack_out == 1'b1) & (stateOut_last_V_1_vld_out == 1'b1))) begin
            stateOut_last_V_1_sel_rd <= ~stateOut_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stateOut_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stateOut_last_V_1_ack_in == 1'b1) & (stateOut_last_V_1_vld_in == 1'b1))) begin
            stateOut_last_V_1_sel_wr <= ~stateOut_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stateOut_last_V_1_state <= 2'd0;
    end else begin
        if ((((stateOut_last_V_1_state == 2'd2) & (stateOut_last_V_1_vld_in == 1'b0)) | ((stateOut_last_V_1_state == 2'd3) & (stateOut_last_V_1_vld_in == 1'b0) & (stateOut_last_V_1_ack_out == 1'b1)))) begin
            stateOut_last_V_1_state <= 2'd2;
        end else if ((((stateOut_last_V_1_state == 2'd1) & (stateOut_last_V_1_ack_out == 1'b0)) | ((stateOut_last_V_1_state == 2'd3) & (stateOut_last_V_1_ack_out == 1'b0) & (stateOut_last_V_1_vld_in == 1'b1)))) begin
            stateOut_last_V_1_state <= 2'd1;
        end else if (((~((stateOut_last_V_1_vld_in == 1'b0) & (stateOut_last_V_1_ack_out == 1'b1)) & ~((stateOut_last_V_1_ack_out == 1'b0) & (stateOut_last_V_1_vld_in == 1'b1)) & (stateOut_last_V_1_state == 2'd3)) | ((stateOut_last_V_1_state == 2'd1) & (stateOut_last_V_1_ack_out == 1'b1)) | ((stateOut_last_V_1_state == 2'd2) & (stateOut_last_V_1_vld_in == 1'b1)))) begin
            stateOut_last_V_1_state <= 2'd3;
        end else begin
            stateOut_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((stateIn_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Result_s_reg_126 <= {{stateIn_data_V_0_data_out[143:80]}};
        stateIn_last_V_tmp_reg_121 <= stateIn_last_V_0_data_out;
        tmp_82_reg_131 <= tmp_82_fu_116_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((stateIn_data_V_0_load_A == 1'b1)) begin
        stateIn_data_V_0_payload_A <= stateIn_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stateIn_data_V_0_load_B == 1'b1)) begin
        stateIn_data_V_0_payload_B <= stateIn_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stateIn_last_V_0_load_A == 1'b1)) begin
        stateIn_last_V_0_payload_A <= stateIn_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stateIn_last_V_0_load_B == 1'b1)) begin
        stateIn_last_V_0_payload_B <= stateIn_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stateOut_data_V_1_load_A == 1'b1)) begin
        stateOut_data_V_1_payload_A <= grp_present_rounds_fu_80_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((stateOut_data_V_1_load_B == 1'b1)) begin
        stateOut_data_V_1_payload_B <= grp_present_rounds_fu_80_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((stateOut_last_V_1_load_A == 1'b1)) begin
        stateOut_last_V_1_payload_A <= stateIn_last_V_tmp_reg_121;
    end
end

always @ (posedge ap_clk) begin
    if ((stateOut_last_V_1_load_B == 1'b1)) begin
        stateOut_last_V_1_payload_B <= stateIn_last_V_tmp_reg_121;
    end
end

always @ (*) begin
    if ((~((stateOut_last_V_1_ack_in == 1'b0) | (stateOut_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((stateOut_last_V_1_ack_in == 1'b0) | (stateOut_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        stateIn_TDATA_blk_n = stateIn_data_V_0_state[1'd0];
    end else begin
        stateIn_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((stateIn_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        stateIn_data_V_0_ack_out = 1'b1;
    end else begin
        stateIn_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stateIn_data_V_0_sel == 1'b1)) begin
        stateIn_data_V_0_data_out = stateIn_data_V_0_payload_B;
    end else begin
        stateIn_data_V_0_data_out = stateIn_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((stateIn_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        stateIn_last_V_0_ack_out = 1'b1;
    end else begin
        stateIn_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stateIn_last_V_0_sel == 1'b1)) begin
        stateIn_last_V_0_data_out = stateIn_last_V_0_payload_B;
    end else begin
        stateIn_last_V_0_data_out = stateIn_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        stateOut_TDATA_blk_n = stateOut_data_V_1_state[1'd1];
    end else begin
        stateOut_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((stateOut_data_V_1_sel == 1'b1)) begin
        stateOut_data_V_1_data_out = stateOut_data_V_1_payload_B;
    end else begin
        stateOut_data_V_1_data_out = stateOut_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((grp_present_rounds_fu_80_ap_done == 1'b0) | (stateOut_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        stateOut_data_V_1_vld_in = 1'b1;
    end else begin
        stateOut_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((stateOut_last_V_1_sel == 1'b1)) begin
        stateOut_last_V_1_data_out = stateOut_last_V_1_payload_B;
    end else begin
        stateOut_last_V_1_data_out = stateOut_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((grp_present_rounds_fu_80_ap_done == 1'b0) | (stateOut_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        stateOut_last_V_1_vld_in = 1'b1;
    end else begin
        stateOut_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((stateIn_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((grp_present_rounds_fu_80_ap_done == 1'b0) | (stateOut_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((stateOut_last_V_1_ack_in == 1'b0) | (stateOut_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state4 = ((stateOut_last_V_1_ack_in == 1'b0) | (stateOut_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_present_rounds_fu_80_ap_start = grp_present_rounds_fu_80_ap_start_reg;

assign stateIn_TREADY = stateIn_last_V_0_state[1'd1];

assign stateIn_data_V_0_ack_in = stateIn_data_V_0_state[1'd1];

assign stateIn_data_V_0_load_A = (stateIn_data_V_0_state_cmp_full & ~stateIn_data_V_0_sel_wr);

assign stateIn_data_V_0_load_B = (stateIn_data_V_0_state_cmp_full & stateIn_data_V_0_sel_wr);

assign stateIn_data_V_0_sel = stateIn_data_V_0_sel_rd;

assign stateIn_data_V_0_state_cmp_full = ((stateIn_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stateIn_data_V_0_vld_in = stateIn_TVALID;

assign stateIn_data_V_0_vld_out = stateIn_data_V_0_state[1'd0];

assign stateIn_last_V_0_ack_in = stateIn_last_V_0_state[1'd1];

assign stateIn_last_V_0_load_A = (stateIn_last_V_0_state_cmp_full & ~stateIn_last_V_0_sel_wr);

assign stateIn_last_V_0_load_B = (stateIn_last_V_0_state_cmp_full & stateIn_last_V_0_sel_wr);

assign stateIn_last_V_0_sel = stateIn_last_V_0_sel_rd;

assign stateIn_last_V_0_state_cmp_full = ((stateIn_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stateIn_last_V_0_vld_in = stateIn_TVALID;

assign stateIn_last_V_0_vld_out = stateIn_last_V_0_state[1'd0];

assign stateOut_TDATA = stateOut_data_V_1_data_out;

assign stateOut_TLAST = stateOut_last_V_1_data_out;

assign stateOut_TVALID = stateOut_last_V_1_state[1'd0];

assign stateOut_data_V_1_ack_in = stateOut_data_V_1_state[1'd1];

assign stateOut_data_V_1_ack_out = stateOut_TREADY;

assign stateOut_data_V_1_load_A = (stateOut_data_V_1_state_cmp_full & ~stateOut_data_V_1_sel_wr);

assign stateOut_data_V_1_load_B = (stateOut_data_V_1_state_cmp_full & stateOut_data_V_1_sel_wr);

assign stateOut_data_V_1_sel = stateOut_data_V_1_sel_rd;

assign stateOut_data_V_1_state_cmp_full = ((stateOut_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stateOut_data_V_1_vld_out = stateOut_data_V_1_state[1'd0];

assign stateOut_last_V_1_ack_in = stateOut_last_V_1_state[1'd1];

assign stateOut_last_V_1_ack_out = stateOut_TREADY;

assign stateOut_last_V_1_load_A = (stateOut_last_V_1_state_cmp_full & ~stateOut_last_V_1_sel_wr);

assign stateOut_last_V_1_load_B = (stateOut_last_V_1_state_cmp_full & stateOut_last_V_1_sel_wr);

assign stateOut_last_V_1_sel = stateOut_last_V_1_sel_rd;

assign stateOut_last_V_1_state_cmp_full = ((stateOut_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stateOut_last_V_1_vld_out = stateOut_last_V_1_state[1'd0];

assign tmp_82_fu_116_p1 = stateIn_data_V_0_data_out[79:0];

endmodule //present
