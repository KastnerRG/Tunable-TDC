// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="orcaPLGate,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.769000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5,HLS_SYN_LUT=33,HLS_VERSION=2018_2}" *)

module orcaPLGate (
        ap_clk,
        ap_rst,
        pulse_V,
        PS_V,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input  [0:0] pulse_V;
input  [1:0] PS_V;
output  [0:0] ap_return;

reg   [0:0] state_V;
wire   [0:0] tmp_fu_55_p3;
reg   [0:0] tmp_reg_81;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] ap_phi_mux_agg_result_V_phi_fu_48_p4;
reg   [0:0] agg_result_V_reg_44;
wire    ap_CS_fsm_state2;
wire   [0:0] pulse_V_read_read_fu_38_p2;
wire   [0:0] tmp_1_fu_63_p1;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 state_V = 1'd0;
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (tmp_fu_55_p3 == 1'd1))) begin
        agg_result_V_reg_44 <= 1'd1;
    end else if (((tmp_reg_81 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        agg_result_V_reg_44 <= state_V;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_55_p3 == 1'd0) & (tmp_1_fu_63_p1 == 1'd1) & (pulse_V_read_read_fu_38_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_V <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_reg_81 <= PS_V[32'd1];
    end
end

always @ (*) begin
    if (((tmp_reg_81 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_phi_mux_agg_result_V_phi_fu_48_p4 = state_V;
    end else begin
        ap_phi_mux_agg_result_V_phi_fu_48_p4 = agg_result_V_reg_44;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_return = ap_phi_mux_agg_result_V_phi_fu_48_p4;

assign pulse_V_read_read_fu_38_p2 = pulse_V;

assign tmp_1_fu_63_p1 = PS_V[0:0];

assign tmp_fu_55_p3 = PS_V[32'd1];

endmodule //orcaPLGate
